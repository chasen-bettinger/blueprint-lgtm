// Generated by CoffeeScript 1.6.3
(function() {
  var Kit, Logger, Q, config, handler, io, kit, log, mod, nm, opts, q_result, restify, s_use, server, service, socketio, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;

  Q = require('q');

  restify = require('restify');

  socketio = require('socket.io');

  Kit = require('./lib/kit').Kit;

  s_use = require('./lib/server_use');

  config = (require('./lib/config'))();

  Logger = require('./lib/logger').Logger;

  kit = new Kit;

  kit.add_service('config', config);

  kit.new_service('logger', Logger);

  log = kit.services.logger.log;

  server = restify.createServer({
    log: log
  });

  io = socketio.listen(server);

  io.set('log level', 2);

  kit.add_service('server', server);

  kit.add_service('io', io);

  _ref = kit.services.config.service_modules;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mod = _ref[_i];
    if (!(mod.enable === true)) {
      continue;
    }
    opts = mod.instConfig ? [mod.instConfig] : null;
    kit.new_service(mod.name, (require(mod.file))[mod["class"]], opts);
  }

  _ref1 = kit.services.config.route_modules;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    mod = _ref1[_j];
    if (!(mod.enable === true)) {
      continue;
    }
    log.info("Initializing " + mod["class"] + " Routes...");
    kit.new_route_service(mod.name, (require(mod.file))[mod["class"]]);
    kit.services.wrapper.add(mod.name);
  }

  _ref2 = config.restify.handlers;
  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
    handler = _ref2[_k];
    server.use(restify[handler]());
  }

  _ref3 = kit.services;
  for (nm in _ref3) {
    service = _ref3[nm];
    if (typeof service.server_use === 'function') {
      server.use(service.server_use);
    }
  }

  q_result = Q.resolve();

  _ref4 = kit.services;
  for (nm in _ref4) {
    service = _ref4[nm];
    if (typeof service.server_init === 'function') {
      (function(service) {
        return q_result = q_result.then(function() {
          return service.server_init(kit);
        });
      })(service);
    }
  }

  q_result.then(function() {
    server.get(/.*/, restify.serveStatic(config.api.static_file_server));
    return server.listen(config.api.port, function() {
      return log.info('Server listening at', server.url);
    });
  }).fail(function(err) {
    log.error(err);
    log.error('SERVER FAILED TO INITIALIZE. EXITING NOW!');
    return process.exit(1);
  });

}).call(this);
