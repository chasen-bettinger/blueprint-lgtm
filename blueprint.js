// Generated by CoffeeScript 1.6.3
(function() {
  var AuthParser, AuthRoute, Db, Kit, Logger, TokenMgr, User, Workout, Wrapper, add_route, alt_wrappers, config, kit, log, pfx, restify, s_use, server, usage;

  Kit = require('./lib/kit').Kit;

  Db = require('./lib/db').Db;

  s_use = require('./lib/server_use');

  config = (require('./lib/config'))();

  Logger = require('./lib/logger').Logger;

  Wrapper = require('./lib/route_wrapper').Wrapper;

  TokenMgr = require('./lib/token_manager').TokenMgr;

  AuthParser = require('./lib/authorizationParser').AuthParser;

  User = require('./routes/r_user').User;

  Workout = require('./routes/r_workout').Workout;

  AuthRoute = require('./routes/r_auth').AuthRoute;

  kit = new Kit;

  kit.add_service('config', config);

  kit.new_service('logger', Logger);

  kit.new_service('tokenMgr', TokenMgr);

  kit.new_service('db', Db);

  kit.new_service('authParser', AuthParser);

  kit.new_service('wrapper', Wrapper, [kit.routes]);

  kit.new_route_service('auth', AuthRoute);

  kit.new_route_service('user', User);

  kit.new_route_service('workout', Workout);

  restify = require('restify');

  log = kit.services.logger.log;

  server = restify.createServer({
    log: log
  });

  server.use(s_use.set_response_headers);

  server.use(restify.queryParser());

  server.use(restify.bodyParser());

  server.use(restify.requestLogger());

  server.use(kit.services.authParser.parseAuthorization);

  server.use(s_use.debug_request);

  usage = {};

  alt_wrappers = {};

  pfx = config.route_prefix.api;

  add_route = function(verb, route, mod, func) {
    var cmd, verbs, wrap, _i, _len, _ref, _results;
    wrap = ((_ref = alt_wrappers[mod]) != null ? _ref : kit.services.wrapper).add(mod, func);
    if (!usage[mod]) {
      usage[mod] = {};
    }
    if (!usage[mod][func]) {
      usage[mod][func] = {};
    }
    usage[mod][func][route] = wrap('use');
    verbs = [verb];
    if (verb === 'del' || verb === 'put') {
      verbs.push('post');
    }
    _results = [];
    for (_i = 0, _len = verbs.length; _i < _len; _i++) {
      cmd = verbs[_i];
      _results.push(server[cmd](pfx + '' + route, wrap));
    }
    return _results;
  };

  add_route('post', '/Auth', 'auth', 'authenticate');

  add_route('post', '/User', 'user', 'create');

  add_route('get', '/User/:usid', 'user', 'get');

  add_route('post', '/Workout', 'workout', 'create');

  add_route('get', '/Workout', 'workout', 'get');

  server.get(pfx, function(q, r, n) {
    r.send(usage);
    return n();
  });

  server.get(/.*/, restify.serveStatic({
    directory: './html_root',
    "default": 'index.html'
  }));

  server.listen(config.api.port, function() {
    return log.info('Server listening at', server.url);
  });

}).call(this);
