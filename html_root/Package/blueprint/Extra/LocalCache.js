// Generated by CoffeeScript 1.4.0
var LocalCache,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

LocalCache = (function() {

  function LocalCache(opts) {
    this._FlushCache = __bind(this._FlushCache, this);

    var f;
    f = 'E:LocalCache:constructor';
    this.options = $.extend({
      sizeMB: 20,
      flushSecs: 10,
      cacheName: 'lc_sess',
      quickKeys: ['auth_rtoken']
    }, opts);
    this.tabby = 'tab' + Math.random();
    this.memCache = {};
    this.dirty = false;
    this.hasLocalStorage = (function() {
      var _ref, _ref1;
      try {
        if ((_ref = window.localStorage) != null) {
          _ref.setItem('TEST', this.tabby);
        }
        return this.tabby === ((_ref1 = window.localStorage) != null ? _ref1.getItem('TEST') : void 0);
      } catch (e) {
        return false;
      }
    }).call(this);
    this.hasTempFs = false;
    if (this.hasLocalStorage) {
      this._InitTempFs();
    }
  }

  LocalCache.prototype.Restore = function() {
    var f, key, val, _i, _len, _ref;
    f = 'E:LocalCache:Restore';
    this.memCache = {};
    if (!this._HasAcquired(true)) {
      return;
    }
    _ref = this.options.quickKeys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if ((val = this._ReadLS(key)) !== null) {
        this.memCache[key] = val;
      }
    }
  };

  LocalCache.prototype.Login = function(obj) {
    var f, key, _i, _len, _ref, _results;
    f = 'E:LocalCache:Login';
    this.memCache = obj;
    if (!this._HasAcquired(true)) {
      return;
    }
    _ref = this.options.quickKeys;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (key in obj) {
        _results.push(this._WriteLS(key, this.memCache[key]));
      }
    }
    return _results;
  };

  LocalCache.prototype.Logout = function() {
    var f, key, _i, _len, _ref;
    f = 'E:LocalCache:Logout';
    this.memCache = {};
    this.dirty = true;
    if (this.hasTempFs) {
      this._FlushCache(true);
    }
    if (this._HasAcquired()) {
      _ref = this.options.quickKeys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        this._DeleteLS(key);
      }
      window.localStorage.removeItem('tabby');
    }
  };

  LocalCache.prototype.Get = function(key) {
    var f;
    f = 'E:LocalCache:Get';
    return this.memCache[key];
  };

  LocalCache.prototype.Put = function(key, obj) {
    var f;
    f = 'E:LocalCache:Put';
    return this._Write(key, obj);
  };

  LocalCache.prototype.QuickGet = function(key) {
    var f;
    f = 'E:LocalCache:QuickGet';
    if (this.hasLocalStorage) {
      return window.localStorage.getItem(key);
    } else {
      return null;
    }
  };

  LocalCache.prototype.QuickPut = function(key, str) {
    var f;
    f = 'E:LocalCache:QuickPut';
    if (this.hasLocalStorage) {
      if (typeof str === 'undefined') {
        window.localStorage.removeItem(key);
      } else {
        window.localStorage.setItem(key, str);
      }
      return true;
    }
    return false;
  };

  LocalCache.prototype._InitTempFs = function() {
    var f,
      _this = this;
    f = 'E:LocalCache:_InitTempFs';
    return this._CheckFS(function() {});
  };

  LocalCache.prototype._Write = function(key, obj) {
    var f;
    f = 'E:LocalCache:_Write';
    this.memCache[key] = obj;
    if (this.hasLocalStorage && __indexOf.call(this.options.quickKeys, key) >= 0 && this._HasAcquired()) {
      return this._WriteLS(key, obj);
    } else {
      return this.dirty = true;
    }
  };

  LocalCache.prototype._HasAcquired = function(takeover) {
    var f;
    f = 'E:LocalCache:_HasAcquired';
    if (takeover === true) {
      return this.QuickPut('tabby', this.tabby);
    }
    return (this.QuickGet('tabby')) === this.tabby;
  };

  LocalCache.prototype._ReadLS = function(key) {
    var obj;
    obj = window.localStorage.getItem(this.options.cacheName + '__' + key);
    if (obj === null) {
      return null;
    } else {
      return JSON.parse(obj);
    }
  };

  LocalCache.prototype._WriteLS = function(key, obj) {
    return window.localStorage.setItem(this.options.cacheName + '__' + key, JSON.stringify(obj));
  };

  LocalCache.prototype._DeleteLS = function(key) {
    return window.localStorage.removeItem(this.options.cacheName + '__' + key);
  };

  LocalCache.prototype._CheckFS = function(cb) {
    var f,
      _this = this;
    f = 'E:LocalCache:_CheckFS';
    return typeof window.webkitRequestFileSystem === "function" ? window.webkitRequestFileSystem(window.TEMPORARY, this.options.sizeMB * 1024 * 1024, function(fs) {
      _this.handleTempFs = fs;
      _this.hasTempFs = true;
      _this.setInterval = setInterval(_this._FlushCache, _this.options.flushSecs * 1000);
      return cb();
    }, function(err) {
      return _this.handleFS = err;
    }) : void 0;
  };

  LocalCache.prototype._FlushCache = function(reset) {
    var data, f,
      _this = this;
    f = 'E:LocalCache:_FlushCache';
    if (this.dirty !== true || this._HasAcquired() !== true) {
      return (this.dirty = false);
    }
    data = this.memCache;
    this.handleTempFs.root.getFile(this.options.cacheName, {
      create: true
    }, function(entry) {
      return entry.createWriter(function(writer) {
        if (!_this._HasAcquired()) {
          return;
        }
        writer.onwriteend = function(e) {
          writer.onwriteend = function(e) {};
          return writer.write(new Blob([JSON.stringify(data)]));
        };
        writer.onerror = function(e) {
          return _log2(f, 'write ERROR', e);
        };
        if (writer.position !== 0 || writer.length !== 0) {
          writer.truncate(0);
        } else {
          writer.onwriteend();
        }
        if (reset) {
          return _this.QuickPut('tabby');
        }
      }, function(err) {
        return _log2(f, 'createWriter ERROR', err);
      });
    }, function(err) {
      return _log2(f, 'root.getFile error', err);
    });
    this.dirty = false;
  };

  return LocalCache;

})();

E.Extra.LocalCache = LocalCache;
