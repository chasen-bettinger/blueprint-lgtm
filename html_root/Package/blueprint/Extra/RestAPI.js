// Generated by CoffeeScript 1.4.0
(function() {
  var RestAPI,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RestAPI = (function() {

    function RestAPI(host, port, pfx, version) {
      this.DoData = __bind(this.DoData, this);

      this.D_DoData = __bind(this.D_DoData, this);

      this.D_NoAuthRequest = __bind(this.D_NoAuthRequest, this);

      this.NoAuthRequest = __bind(this.NoAuthRequest, this);

      this.Request = __bind(this.Request, this);

      var LocalCache;
      port = String(port);
      if (port.length) {
        port = ':' + port;
      }
      if (pfx.length) {
        pfx = '/' + pfx;
      }
      if (version.length) {
        version = '/' + version;
      }
      this.route_prefix = "//" + host + port + pfx + version + "/";
      this.Epic = window.EpicMvc.Epic;
      this.error = {
        statusCode: true
      };
      this.token = false;
      this.refresh_timer = false;
      this.auth_user = false;
      this.auth_web_client = 'web-client';
      LocalCache = new E.Extra.LocalCache;
      this.localCache = function() {
        return LocalCache;
      };
    }

    RestAPI.prototype.CurrentToken = function() {
      return this.token;
    };

    RestAPI.prototype.GetPrefix = function() {
      return this.route_prefix;
    };

    RestAPI.prototype.MakeIssue = function(i, result, p) {
      var f, nm, param, params, token, _i, _len, _ref;
      f = 'RestAPI:MakeIssue:';
      _log2(f, i, result, p);
      token = 'UNRECOGNIZED';
      params = [];
      if ('error' in result) {
        token = result.error.replace(/:/g, '_');
        for (nm in result) {
          param = result[nm];
          if (nm !== 'error') {
            params.push(param);
          }
        }
      }
      if (token === 'UNRECOGNIZED' && 'message' in result) {
        if (/EACCES/.test(result.message)) {
          token = 'CPC_SPAWN_ERROR';
        }
        if (/Command failed:/.test(result.message)) {
          token = 'CPC_CMD_ERROR';
        }
        params.push(result.message.split('(')[0]);
      }
      if (token === 'UNRECOGNIZED') {
        params.push(result.message);
      }
      _ref = p || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        param = _ref[_i];
        params.push(param);
      }
      return i.add(token, params);
    };

    RestAPI.prototype.Post = function(r, s, d) {
      return this.Request('POST', r, s, d);
    };

    RestAPI.prototype.Get = function(r, s, d) {
      return this.Request('GET', r, s, d);
    };

    RestAPI.prototype.Request = function(type, route, debug_source, data) {
      var click_data, f, result,
        _this = this;
      f = "RestAPI:Request:";
      _log2(f, data, {
        debug_source: debug_source,
        type: type,
        route: route
      });
      result = false;
      if (data == null) {
        data = {};
      }
      if (this.token === false) {
        click_data = {
          type: type,
          route: route,
          debug_source: debug_source,
          data: data
        };
        click_data.errorThrown = 'TOKEN_FALSE';
        setTimeout(function() {
          return _this.Epic.makeClick(false, 'async_restErr_401', click_data, false);
        }, 0);
        return null;
      }
      data.auth_token = this.token.access_token;
      result = this.DoData(type, route, debug_source, data);
      if (result === false) {
        if (this.error.errorThrown.name === 'NetworkError') {
          result = {
            error: this.error.errorThrown.name,
            message: this.error.errorThrown.message
          };
        } else {
          result = JSON.parse(this.error.jqXHR.responseText);
        }
        if (result.error && result.error === 'invalid_token') {
          click_data = {
            type: type,
            route: route,
            debug_source: debug_source,
            data: data,
            result: result
          };
          setTimeout(function() {
            return _this.Epic.makeClick(false, 'security_rest1', click_data, false);
          }, 0);
        }
      }
      return result;
    };

    RestAPI.prototype.NoAuthGet = function(r, s, d) {
      return this.NoAuthRequest('GET', r, s, d);
    };

    RestAPI.prototype.NoAuthPost = function(r, s, d) {
      return this.NoAuthRequest('POST', r, s, d);
    };

    RestAPI.prototype.NoAuthRequest = function(type, route, debug_source, data) {
      var f, result;
      f = "RestAPI:NoAuthRequest:";
      _log2(f, data, {
        debug_source: debug_source,
        type: type,
        route: route
      });
      result = false;
      if (data == null) {
        data = {};
      }
      result = this.DoData(type, route, debug_source, data);
      if (result === false) {
        if (this.error.errorThrown.name === 'NetworkError') {
          result = {
            error: this.error.errorThrown.name,
            message: this.error.errorThrown.message
          };
        } else {
          result = JSON.parse(this.error.jqXHR.responseText);
        }
      }
      _log2(f, {
        result: result
      });
      return result;
    };

    RestAPI.prototype.D_NoAuthGet = function(r, s, d) {
      return this.D_NoAuthRequest('GET', r, s, d);
    };

    RestAPI.prototype.D_NoAuthPost = function(r, s, d) {
      return this.D_NoAuthRequest('POST', r, s, d);
    };

    RestAPI.prototype.D_NoAuthRequest = function(type, route, debug_source, data) {
      var f, result;
      f = "RestAPI:D_NoAuthRequest:";
      _log2(f, data, {
        debug_source: debug_source,
        type: type,
        route: route
      });
      result = false;
      if (data == null) {
        data = {};
      }
      return (this.D_DoData(type, route, debug_source, data)).then(function(result) {
        if (result === false) {
          if (this.error.errorThrown.name === 'NetworkError') {
            result = {
              error: this.error.errorThrown.name,
              message: this.error.errorThrown.message
            };
          } else {
            result = JSON.parse(this.error.jqXHR.responseText);
          }
        }
        _log2(f, {
          result: result
        });
        return result;
      });
    };

    RestAPI.prototype.D_DoData = function(type, route, debug_source, data) {
      var f;
      f = "RestAPI:DoData:";
      _log2(f, data, {
        debug_source: debug_source,
        type: type,
        route: route
      });
      return (m.request({
        background: true,
        method: type,
        url: this.route_prefix + route,
        data: data
      })).then(null, function(error) {
        return _log2('D_DoData:ERROR:', {
          error: error
        });
      });
    };

    RestAPI.prototype.DoData = function(type, route, debug_source, data) {
      var f, result,
        _this = this;
      f = "RestAPI:DoData:";
      _log2(f, data, {
        debug_source: debug_source,
        type: type,
        route: route
      });
      result = false;
      this.error = {
        statusCode: true
      };
      $.ajax({
        url: this.route_prefix + route,
        data: data,
        type: type,
        dataType: 'json',
        async: false,
        cache: false
      }).done(function(data, textStatus, jqXHR) {
        return result = data;
      }).fail(function(jqXHR, textStatus, errorThrown) {
        var statusCode;
        statusCode = typeof errorThrown === 'string' ? errorThrown : errorThrown.name;
        return _this.error = {
          statusCode: statusCode,
          jqXHR: jqXHR,
          textStatus: textStatus,
          errorThrown: errorThrown
        };
      });
      return result;
    };

    RestAPI.prototype.DoToken = function(pass) {
      var f, rtoken,
        _this = this;
      f = 'E:Rest:DoToken:';
      _log2(f, pass, this.token);
      if (pass) {
        this.token = this.DoData('POST', 'Auth', f + 'user/pass', {
          username: this.auth_user,
          password: pass,
          grant_type: 'password',
          client_id: this.auth_web_client
        });
      } else {
        if (this.token === false) {
          this.localCache().Restore();
          rtoken = this.localCache().Get('auth_rtoken');
          if (rtoken != null ? rtoken.length : void 0) {
            this.token = {
              refresh_token: rtoken
            };
          }
        }
        if (this.token) {
          this.token = this.DoData('POST', 'Auth', f + 'refresh', {
            refresh_token: this.token.refresh_token,
            grant_type: 'refresh_token',
            client_id: this.auth_web_client
          });
        }
      }
      if (this.token) {
        if (pass) {
          this.localCache().Login({
            auth_rtoken: this.token.refresh_token
          });
        } else {
          this.localCache().Put('auth_rtoken', this.token.refresh_token);
        }
        if (this.refresh_timer === false) {
          this.refresh_timer = setTimeout((function() {
            _this.refresh_timer = false;
            return _this.DoToken();
          }), (this.token.expires_in - 10) * 1000);
        }
      } else if (this.statusCode === 'Unauthorized' && !pass) {
        this.localCache().Logout();
        if (this.refresh_timer !== false) {
          clearTimeout(this.refresh_timer);
          this.refresh_timer = false;
        }
        window.EpicMvc.Epic.logout('Security.rest1', {});
      }
      _log2(f, '@token/statusCode/rtoken', this.token, this.statusCode, rtoken);
      return this.token;
    };

    RestAPI.prototype.GetS3File = function(s3key, start, length, dir, cb) {
      var cache_bust, f, url, xhr;
      f = "E/RestAPI.getEwt:";
      _log2(f, 'top', {
        s3key: s3key,
        start: start,
        length: length
      });
      xhr = new XMLHttpRequest();
      xhr.onloadend = function(e) {
        return cb(e.target.response);
      };
      this.s3_prefix = "http://s3.amazonaws.com/" + dir + "/";
      cache_bust = '?_=' + new Date().valueOf();
      url = this.s3_prefix + s3key + cache_bust;
      xhr.open('GET', url, true);
      xhr.setRequestHeader('Range', "bytes=" + start + "-" + (start + length - 1));
      xhr.responseType = 'blob';
      xhr.send();
      return xhr;
    };

    RestAPI.prototype.Login = function(auth_user, pass) {
      this.Logout();
      this.auth_user = auth_user;
      this.localCache().QuickPut('auth_user', this.auth_user);
      if (pass) {
        return this.DoToken(pass);
      }
    };

    RestAPI.prototype.Logout = function() {
      this.auth_user = this.token = false;
      this.localCache().Logout();
      if (this.refresh_timer !== false) {
        clearTimeout(this.refresh_timer);
        this.refresh_timer = false;
      }
    };

    RestAPI.prototype.GetMap = function(resource, sub_resource) {
      this.resource_map = {
        user: {
          status: {
            ACTIVE: {
              token: 'ACTIVE',
              nice: 'Active'
            },
            INACTIVE: {
              token: 'INACTIVE',
              nice: 'Inactive'
            }
          }
        }
      };
      if (sub_resource != null ? sub_resource.length : void 0) {
        return this.resource_map[resource][sub_resource];
      } else {
        return this.resource_map[resource];
      }
    };

    return RestAPI;

  })();

  E.Extra.RestAPI = RestAPI;

}).call(this);
