// Generated by CoffeeScript 1.4.0
var CHECK_birthDate, CHECK_phoneAny, D2H_html5date, custom_filter, filter_chars, filter_chars_pluggin;

filter_chars_pluggin = function(container) {
  var f, prefix;
  f = 'filter_chars_plugin';
  if (container === 'RESET') {
    return window.filter_chars_globals = {};
  }
  f = 'filter_chars_plugin';
  $('.filter-chars-input', container).on("keyup", function(event_obj) {
    var nm;
    nm = $(this).attr("data-filter-chars-name");
    filter_chars_globals[nm] = $(this).val();
    return filter_chars(nm);
  }).each(function() {
    var nm, _ref;
    nm = $(this).attr("data-filter-chars-name");
    if ((_ref = filter_chars_globals[nm]) == null) {
      filter_chars_globals[nm] = '';
    }
    return $(this).val(filter_chars_globals[nm]);
  });
  prefix = 'filter-chars-';
  $(".filter-chars-container", container).each(function() {
    var nm;
    nm = $(this).attr("data-filter-chars-name");
    _log2(f, 'nm,class', nm, $(this).attr('class'));
    return filter_chars(nm, $(this));
  });
  return $('.filter-chars-clear', container).on("click", function(event_obj) {
    var nm;
    nm = $(this).attr("data-filter-chars-name");
    filter_chars_globals[nm] = '';
    $(".filter-chars-input[data-filter-chars-name='" + nm + "']").val('');
    filter_chars(nm);
    return false;
  });
};

filter_chars = function(nm, ctx) {
  var f, pattern, rows, str;
  f = 'E/Util:filter_chars:';
  str = window.filter_chars_globals[nm];
  if (ctx == null) {
    ctx = $(".filter-chars-container[data-filter-chars-name='" + nm + "']");
  }
  rows = $('.filter-chars', ctx != null ? ctx : document);
  if (str.length === 0) {
    rows.show();
    return;
  }
  pattern = new RegExp(str, 'i');
  return rows.each(function() {
    var e, parts;
    e = $(this);
    parts = e.attr('data-filter-chars');
    if ((parts.search(pattern)) !== -1) {
      return e.show();
    } else {
      return e.hide();
    }
  });
};

custom_filter = function(val, spec) {
  var age, d, date, f, func, hd, m, mbytes, md, mmap, now, oDate, p1, p2, p3, result, s, time, y, _ref, _ref1, _ref2;
  f = 'E/Util:filter:';
  _ref = spec.split(':'), func = _ref[0], p1 = _ref[1], p2 = _ref[2], p3 = _ref[3];
  switch (func) {
    case 'tz':
      return (val.replace('$', '/')).replace(/_/g, ' ');
    case 'html':
      switch (p1) {
        case 'id':
          return ((val != null ? val : '').replace(' ', '_')).replace(/[^a-z_0-9-]/gi, '');
        default:
          return BROKEN_FILT_HTML_P1_UNKNOWN();
      }
      break;
    case 'para':
      return '<p>' + ((val != null ? val : '').split('\n')).join('</p><p>' + '</p>');
    case 'phone':
      if (val === 'null' || val === '000-000-0000' || val === null) {
        return '';
      }
      return val;
    case 'age':
      if (val === 'null' || val === '0000-00-00' || val === null) {
        return '';
      }
      if (!(val != null ? val.length : void 0)) {
        return val;
      }
      now = new Date().getTime();
      age = (now - Date.parse(val)) / (60 * 60 * 24 * 365.25);
      _log2(f, 'now/age', now, age);
      return Math.floor(age / 1000);
    case 'date':
      if (val === 'null' || val === null || val === '') {
        return '';
      }
      if (val === '0000-00-00' || val === '0000-00-00 00:00:00') {
        return '';
      }
      if (!(val != null ? val.length : void 0)) {
        return '!!';
      }
      _ref1 = val.split('T'), date = _ref1[0], time = _ref1[1];
      _ref2 = date.split('-'), y = _ref2[0], m = _ref2[1], d = _ref2[2];
      result = p1 === 'long' ? (mmap = ['0', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'], "" + mmap[Number(m)] + " " + d + ", " + y) : p1 === 'detail' ? val : p1 === 'format' ? (oDate = moment(val), oDate.format(p2.replace(/_/g, ':'))) : "" + m + "/" + d + "/" + y;
      result = p2 === 'time' ? result += ' ' + time.slice(0, 8) : result;
      return result != null ? result : '!';
    case 'to_upper':
      return val.toUpperCase();
    case 'mbytes':
      if (typeof val === 'number') {
        mbytes = val / 1024 / 1014;
        mbytes = mbytes.toFixed(2);
        return "" + mbytes + " MB";
      } else {
        return "";
      }
      break;
    case 'duration':
      s = (Number(val)) + 30;
      hd = Math.floor(s / 3600);
      s -= hd * 3600;
      md = Math.floor(s / 60);
      if (hd < 10) {
        hd = '0' + hd;
      }
      if (md < 10) {
        md = '0' + md;
      }
      return "" + hd + ":" + md;
  }
};

CHECK_birthDate = function(fieldName, validateExpr, value, oF) {
  var check, f, patt;
  f = 'E/Util:CHECK_birthDate:';
  patt = new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$");
  check = patt.test(value);
  if (!check) {
    return check;
  }
  return true;
};

CHECK_phoneAny = function(fieldName, validateExpr, value, oF) {
  var f;
  f = 'E/Util:CHECK_phoneAny:';
  value = value.replace(/[^0-9]/g, '');
  return value.length > 9;
};

D2H_html5date = function(fieldName, filtExpr, value) {
  var date, time, _ref;
  if ((value != null ? value.length : void 0) > 11) {
    _ref = value.split('T'), date = _ref[0], time = _ref[1];
    return date;
  } else {
    return value;
  }
};

window.filter_chars_globals = {};

window.filter_chars_pluggin = filter_chars_pluggin;

window.EpicMvc.custom_filter = custom_filter;

window.EpicMvc.FistFilt.CHECK_birthDate = CHECK_birthDate;

window.EpicMvc.FistFilt.CHECK_phoneAny = CHECK_phoneAny;

window.EpicMvc.FistFilt.D2H_html5date = D2H_html5date;
