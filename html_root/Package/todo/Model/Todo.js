// Generated by CoffeeScript 1.6.3
(function() {
  var Todo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Todo = (function(_super) {
    __extends(Todo, _super);

    function Todo(Epic, view_nm) {
      var ss;
      ss = {
        show_state: 'all',
        active_item_id: false
      };
      Todo.__super__.constructor.call(this, Epic, view_nm, ss);
      this.rest = rest_v1;
    }

    Todo.prototype.action = function(act, p) {
      var batch_ids, data, el, f, i, id, item, m, new_item, nm, r, results, title, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      f = "Todo:action:" + act;
      _log1(f, p);
      r = {};
      i = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      m = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
      switch (act) {
        case "show":
          this.show_state = p.state;
          this.invalidateTables(true);
          break;
        case "choose_item":
          if (p.clear === true) {
            this.active_item_id = false;
          } else {
            el = $(p.input_obj);
            id = el.attr("data-p-id");
            this.active_item_id = Number(id);
          }
          this.invalidateTables(true);
          break;
        case "save_todo":
          el = $(p.input_obj);
          id = el.attr("data-p-id");
          title = el.val();
          if (id != null) {
            data = {
              title: title
            };
            results = rest_v1.call('POST', "Prototype/Todo/Item/" + id + "/update", f, data);
            _log2(f, 'got update results:', results);
            if (results.success) {
              _ref = this.c_items;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (!(item.id === (Number(id)))) {
                  continue;
                }
                _ref1 = results.Item[0];
                for (nm in _ref1) {
                  val = _ref1[nm];
                  item[nm] = val;
                }
                break;
              }
            }
          } else {
            data = {
              title: title,
              completed: ''
            };
            results = rest_v1.call('POST', 'Prototype/Todo/Item', f, data);
            _log2(f, 'got create results:', results);
            new_item = results.Item[0];
            this.c_items.push(new_item);
          }
          this.invalidateTables(true);
          break;
        case "delete_todo":
          _log2(f, 'items before:', this.c_items);
          results = rest_v1.call('POST', "Prototype/Todo/Item/" + p.id + "/delete", f);
          _log2(f, 'got delete results:', results);
          if (results.success === true) {
            this.c_items = false;
          }
          this.invalidateTables(true);
          break;
        case "clear_completed":
          batch_ids = (function() {
            var _j, _len1, _ref2, _results;
            _ref2 = this.c_items;
            _results = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              item = _ref2[_j];
              if (item.completed === 'yes') {
                _results.push(item.id);
              }
            }
            return _results;
          }).call(this);
          data = {
            batch_ids: batch_ids
          };
          results = rest_v1.call('POST', "Prototype/Todo/Item/batch/delete", f, data);
          _log2(f, 'got delete results:', results);
          if (results.success === true) {
            this.c_items = false;
          }
          this.invalidateTables(true);
          break;
        case "mark_toggle":
          el = $(p.input_obj);
          id = el.attr("data-p-id");
          _ref2 = this.c_items;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            item = _ref2[_j];
            if (!(item.id === (Number(id)))) {
              continue;
            }
            data = {
              completed: item.completed === 'yes' ? '' : 'yes'
            };
            results = rest_v1.call('POST', "Prototype/Todo/Item/" + id + "/update", f, data);
            _log2(f, 'got mark toggle results:', results);
            if (results.success) {
              _ref3 = results.Item[0];
              for (nm in _ref3) {
                val = _ref3[nm];
                item[nm] = val;
              }
            }
            break;
          }
          this.invalidateTables(true);
          break;
        case "mark_all":
          batch_ids = (function() {
            var _k, _len2, _ref4, _results;
            _ref4 = this.c_items;
            _results = [];
            for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
              item = _ref4[_k];
              if (item.completed !== 'yes') {
                _results.push(item.id);
              }
            }
            return _results;
          }).call(this);
          data = {
            completed: 'yes',
            batch_ids: batch_ids
          };
          results = rest_v1.call('POST', "Prototype/Todo/Item/batch/update", f, data);
          _log2(f, 'got mark all results:', results);
          if (results.success === true) {
            this.c_items = false;
          }
          this.invalidateTables(true);
          break;
        default:
          return Todo.__super__.action.call(this, act, p);
      }
      return [r, i, m];
    };

    Todo.prototype.loadTable = function(tbl_nm) {
      var c, f, item, item_list, nc, row, rows, _i, _j, _len, _len1;
      f = "loadTable:" + tbl_nm;
      item_list = this._getTodos();
      switch (tbl_nm) {
        case 'Options':
          c = 0;
          nc = 0;
          for (_i = 0, _len = item_list.length; _i < _len; _i++) {
            item = item_list[_i];
            if (item.completed === 'yes') {
              c++;
            } else {
              nc++;
            }
          }
          row = {
            show_all: this.show_state === 'all' ? 'yes' : '',
            show_completed: this.show_state === 'completed' ? 'yes' : '',
            show_active: this.show_state === 'active' ? 'yes' : '',
            not_completed_count: nc,
            completed_count: c,
            count: item_list.length
          };
          return this.Table[tbl_nm] = [row];
        case 'Item':
          switch (this.show_state) {
            case 'all':
              rows = item_list;
              break;
            case 'active':
              rows = (function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = item_list.length; _j < _len1; _j++) {
                  item = item_list[_j];
                  if (item.completed !== 'yes') {
                    _results.push(item);
                  }
                }
                return _results;
              })();
              break;
            case 'completed':
              rows = (function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = item_list.length; _j < _len1; _j++) {
                  item = item_list[_j];
                  if (item.completed === 'yes') {
                    _results.push(item);
                  }
                }
                return _results;
              })();
          }
          for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
            row = rows[_j];
            row.is_editing = row.id === this.active_item_id ? 'yes' : '';
          }
          return this.Table[tbl_nm] = rows;
        default:
          return Todo.__super__.loadTable.call(this, tbl_nm);
      }
    };

    Todo.prototype.fistLoadData = function(oFist) {
      switch (oFist.getFistNm()) {
        case 'Login':
          return null;
        default:
          return Todo.__super__.fistLoadData.call(this, oFist);
      }
    };

    Todo.prototype.fistGetFieldChoices = function(oFist, field_nm) {
      switch (field_nm) {
        case 'DevPull':
          return {
            options: ['Development', 'Production'],
            values: ['yes', 'no']
          };
        default:
          return Todo.__super__.fistGetFieldChoices.call(this, oFist, field_nm);
      }
    };

    Todo.prototype._getTodos = function() {
      var f, results;
      f = 'Todo._getTodos:';
      if (this.c_items) {
        return this.c_items;
      }
      results = rest_v1.call('GET', 'Prototype/Todo/Item', f);
      if (results.success) {
        return this.c_items = results.Item;
      } else {
        return this.c_items = [];
      }
    };

    return Todo;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Todo = Todo;

}).call(this);
