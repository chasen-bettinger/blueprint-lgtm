// Generated by CoffeeScript 1.4.0
var Todo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Todo = (function(_super) {

  __extends(Todo, _super);

  function Todo(Epic, view_nm) {
    this.C_SyncTodo = __bind(this.C_SyncTodo, this);

    var ss;
    ss = {
      show_state: 'all',
      active_item_id: false
    };
    Todo.__super__.constructor.call(this, Epic, view_nm, ss);
    this.rest = window.rest_v1;
    this.cache = window.cache_v1;
    this.cache_cb = this.C_SyncTodo;
    this.c_is_pending = true;
  }

  Todo.prototype.action = function(act, p) {
    var batch_ids, data, el, f, i, id, item, m, r, results, title;
    f = "Todo:action:" + act;
    _log1(f, p);
    r = {};
    i = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
    m = new window.EpicMvc.Issue(this.Epic, this.view_nm, act);
    switch (act) {
      case "show":
        this.show_state = p.state;
        this.invalidateTables(true);
        break;
      case "choose_item":
        if (p.clear === true) {
          this.active_item_id = false;
        } else {
          el = $(p.input_obj);
          id = el.attr("data-p-id");
          this.active_item_id = Number(id);
        }
        this.invalidateTables(true);
        break;
      case "save_todo":
        el = $(p.input_obj);
        id = el.attr("data-p-id");
        title = el.val();
        if (id != null) {
          data = {
            title: title
          };
          results = this.rest.NoAuthPost("Prototype/Todo/Item/" + id + "/update", f, data);
          _log2(f, 'got update results:', results);
          if (results.success) {
            m.add('SUCCESS');
            r.success = 'SUCCESS';
          } else {
            this.rest.MakeIssue(i, result);
            r.success = 'FAIL';
          }
        } else {
          data = {
            title: title,
            completed: ''
          };
          results = this.rest.NoAuthPost('Prototype/Todo/Item', f, data);
          _log2(f, 'got create results:', results);
          if (results.success) {
            m.add('SUCCESS');
            r.success = 'SUCCESS';
          } else {
            this.rest.MakeIssue(i, result);
            r.success = 'FAIL';
          }
        }
        this.invalidateTables(true);
        break;
      case "delete_todo":
        results = this.rest.NoAuthPost("Prototype/Todo/Item/" + p.id + "/delete", f);
        _log2(f, 'got delete results:', results);
        if (results.success === true) {
          m.add('SUCCESS');
          r.success = 'SUCCESS';
          this.invalidateTables(true);
        } else {
          this.rest.MakeIssue(i, result);
          r.success = 'FAIL';
        }
        break;
      case "clear_completed":
        batch_ids = (function() {
          var _ref, _results;
          _ref = this.c_todo.Item_idx;
          _results = [];
          for (id in _ref) {
            item = _ref[id];
            if (item.completed === 'yes') {
              _results.push(item.id);
            }
          }
          return _results;
        }).call(this);
        data = {
          batch_ids: batch_ids
        };
        results = this.rest.NoAuthPost("Prototype/Todo/Item/batch/delete", f, data);
        _log2(f, 'got delete results:', results);
        if (results.success === true) {
          m.add('SUCCESS');
          r.success = 'SUCCESS';
          this.invalidateTables(true);
        } else {
          this.rest.MakeIssue(i, result);
          r.success = 'FAIL';
        }
        break;
      case "mark_toggle":
        el = $(p.input_obj);
        id = el.attr("data-p-id");
        data = {
          completed: this.c_todo.Item_idx[id].completed === 'yes' ? '' : 'yes'
        };
        results = this.rest.NoAuthPost("Prototype/Todo/Item/" + id + "/update", f, data);
        _log2(f, {
          results: results
        });
        if (results.success) {
          m.add('SUCCESS');
          r.success = 'SUCCESS';
          this.invalidateTables(true);
        } else {
          this.rest.MakeIssue(i, result);
          r.success = 'FAIL';
        }
        break;
      case "mark_all":
        batch_ids = (function() {
          var _ref, _results;
          _ref = this.c_todo.Item_idx;
          _results = [];
          for (id in _ref) {
            item = _ref[id];
            if (item.completed !== 'yes') {
              _results.push(item.id);
            }
          }
          return _results;
        }).call(this);
        data = {
          completed: 'yes',
          batch_ids: batch_ids
        };
        results = this.rest.NoAuthPost("Prototype/Todo/Item/batch/update", f, data);
        _log2(f, 'got mark all results:', results);
        if (results.success === true) {
          m.add('SUCCESS');
          r.success = 'SUCCESS';
          this.invalidateTables(true);
        } else {
          this.rest.MakeIssue(i, result);
          r.success = 'FAIL';
        }
        break;
      default:
        return Todo.__super__.action.call(this, act, p);
    }
    return [r, i, m];
  };

  Todo.prototype.loadTable = function(tbl_nm) {
    var c, f, item, item_list, nc, row, rows, _i, _j, _len, _len1;
    f = "loadTable:" + tbl_nm;
    _log2(f);
    item_list = this.S_GetItems();
    if (item_list === true) {
      item_list = [];
    }
    switch (tbl_nm) {
      case 'Options':
        c = 0;
        nc = 0;
        for (_i = 0, _len = item_list.length; _i < _len; _i++) {
          item = item_list[_i];
          if (item.completed === 'yes') {
            c++;
          } else {
            nc++;
          }
        }
        row = {
          show_all: this.show_state === 'all' ? 'yes' : '',
          show_completed: this.show_state === 'completed' ? 'yes' : '',
          show_active: this.show_state === 'active' ? 'yes' : '',
          not_completed_count: nc,
          completed_count: c,
          count: item_list.length
        };
        return this.Table[tbl_nm] = [row];
      case 'Item':
        switch (this.show_state) {
          case 'all':
            rows = item_list;
            break;
          case 'active':
            rows = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = item_list.length; _j < _len1; _j++) {
                item = item_list[_j];
                if (item.completed !== 'yes') {
                  _results.push(item);
                }
              }
              return _results;
            })();
            break;
          case 'completed':
            rows = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = item_list.length; _j < _len1; _j++) {
                item = item_list[_j];
                if (item.completed === 'yes') {
                  _results.push(item);
                }
              }
              return _results;
            })();
        }
        for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
          row = rows[_j];
          row.is_editing = row.id === this.active_item_id ? 'yes' : '';
        }
        return this.Table[tbl_nm] = rows;
      default:
        return Todo.__super__.loadTable.call(this, tbl_nm);
    }
  };

  Todo.prototype.fistLoadData = function(oFist) {
    switch (oFist.getFistNm()) {
      case 'Login':
        return null;
      default:
        return Todo.__super__.fistLoadData.call(this, oFist);
    }
  };

  Todo.prototype.S_GetItems = function() {
    var f, id, item, todos, _ref, _results;
    f = 'Todo._getItems:';
    todos = this.S_GetTodoResource();
    if (todos === true) {
      return true;
    } else {
      _ref = this.c_todo.Item_idx;
      _results = [];
      for (id in _ref) {
        item = _ref[id];
        _results.push(item);
      }
      return _results;
    }
  };

  Todo.prototype.S_GetTodoResource = function() {
    var data, f;
    f = 'M/Todo:S_GetTodoResource:';
    _log2(f);
    if (this.c_todo) {
      return this.c_todo;
    }
    data = this.cache.GetResource('Todo', {}, this.cache_cb);
    _log2(f, 'got data:', data);
    this.cache_cb = null;
    if (data === true) {
      return data;
    }
    this.c_is_pending = false;
    return this.c_todo = data.Todo;
  };

  Todo.prototype.C_SyncTodo = function(resource, data) {
    var f;
    f = 'M/Todo:C_SyncTodo:';
    _log2(f, {
      resource: resource,
      data: data
    });
    if (resource !== 'Todo') {
      BROKEN();
    }
    this.c_is_pending = false;
    this.c_todo = data.Todo;
    return this.invalidateTables(true);
  };

  return Todo;

})(window.EpicMvc.ModelJS);

window.EpicMvc.Model.Todo = Todo;
