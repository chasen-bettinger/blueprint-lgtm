// Generated by CoffeeScript 1.9.2
(function() {
  exports.start = function(include_server, services_enabled, routes_enabled, mysql_enabled, mysql_mods_enabled, mongo_enabled, more_config) {
    var ErrorMore, Kit, Logger, M, Q, Server, _, config, fn, i, j, kit, len, len1, log, mod, nm, opts, path, q_result, ref, ref1, ref2, ref3, route, routePath, server, service, servicePath;
    if (more_config == null) {
      more_config = {};
    }
    server = false;
    M = require('moment');
    Q = require('q');
    path = require('path');
    _ = require('lodash');
    M.defaultFormat = 'YYYY-MM-DD HH:mm:ss';
    Kit = require('./lib/kit').Kit;
    config = (require('./config'))();
    config = _.merge(config, more_config);
    Logger = require('./lib/logger').Logger;
    ErrorMore = require('./lib/error');
    kit = new Kit;
    kit.add_service('config', config);
    kit.new_service('logger', Logger);
    kit.add_service('error', ErrorMore);
    log = kit.services.logger.log;
    if (mysql_enabled) {
      config.db.mysql.enable = mysql_enabled;
    }
    config.db.mysql.mods_enabled = mysql_mods_enabled;
    if (mongo_enabled) {
      config.db.mongo.enable = mongo_enabled;
    }
    if (include_server) {
      Server = require('./lib/server').Server;
      server = new Server(kit);
      server.create();
      kit.add_service('server', server);
    }
    for (i = 0, len = services_enabled.length; i < len; i++) {
      nm = services_enabled[i];
      mod = kit.services.config.service_modules[nm];
      if (!mod) {
        throw new Error("No such service-module: " + nm);
      }
      mod.name = nm;
      log.info("Initializing " + mod["class"] + " Service...");
      opts = mod.instConfig ? [mod.instConfig] : null;
      servicePath = path.join(config.processDir, mod.file);
      kit.new_service(mod.name, (require(servicePath))[mod["class"]], opts);
    }
    if (server) {
      server.add_restify_handlers();
    }
    if (server) {
      server.handle_options();
    }
    if (server) {
      ref = kit.services;
      for (nm in ref) {
        service = ref[nm];
        if (!(typeof service.server_use === 'function')) {
          continue;
        }
        log.info("Calling server.use for service: " + nm);
        server.server.use(service.server_use);
      }
    }
    if (server) {
      server.parse_json();
    }
    if (server) {
      server.strip_html();
    }
    for (j = 0, len1 = routes_enabled.length; j < len1; j++) {
      nm = routes_enabled[j];
      mod = kit.services.config.route_modules[nm];
      if (!mod) {
        throw new Error("No such route-module: " + nm);
      }
      mod.name = nm;
      log.info("Initializing " + mod["class"] + " Routes...");
      routePath = path.join(config.processDir, mod.file);
      kit.new_route_service(mod.name, (require(routePath))[mod["class"]]);
      kit.services.wrapper.add(mod.name);
    }
    q_result = Q.resolve();
    ref1 = kit.services;
    fn = function(service) {
      if (typeof service.server_init === 'function') {
        q_result = q_result.then(function() {
          return service.server_init(kit);
        });
      }
      if (typeof service.server_init_promise === 'function') {
        return (function(service) {
          return q_result = service.server_init_promise(kit, q_result);
        })(service);
      }
    };
    for (nm in ref1) {
      service = ref1[nm];
      fn(service);
    }
    ref2 = kit.routes;
    for (nm in ref2) {
      route = ref2[nm];
      if (typeof route.server_init === 'function') {
        (function(route) {
          return q_result = q_result.then(function() {
            return route.server_init(kit);
          });
        })(route);
      }
    }
    ref3 = kit.services;
    for (nm in ref3) {
      service = ref3[nm];
      if (typeof service.server_start === 'function') {
        (function(service) {
          return q_result = q_result.then(function() {
            return service.server_start(kit);
          });
        })(service);
      }
    }
    if (server) {
      q_result = q_result.then(function() {
        var defer, err;
        server.add_static_server();
        defer = Q.defer();
        try {
          server.start(function() {
            log.info('Server listening at', server.url);
            return defer.resolve(null);
          });
        } catch (_error) {
          err = _error;
          defer.reject(err);
        }
        return defer.promise;
      });
    }
    q_result = q_result.then(function() {
      log.debug('SERVER NORMAL START');
      return kit;
    });
    q_result = q_result.fail(function(err) {
      log.error(err);
      log.error('SERVER FAILED TO INITIALIZE. EXITING NOW!');
      return process.exit(1);
    });
    return q_result;
  };

}).call(this);
