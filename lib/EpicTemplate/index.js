// Generated by CoffeeScript 1.4.0
(function() {
  var CookieCutterModel, Epic, EpicTemplate, Loader, Pageflow, fs, window, _log;

  _log = console.log;

  window = {
    EpicMvc: {
      Extras: {},
      Model: {}
    }
  };

  fs = require('fs');

  CookieCutterModel = (function() {

    function CookieCutterModel(Epic, view_nm, init_table) {
      this.Epic = Epic;
      this.view_nm = view_nm;
      this.init_table = init_table;
      this.Table = this.init_table;
    }

    CookieCutterModel.prototype.getTable = function(tbl_nm) {
      return this.Table[tbl_nm];
    };

    return CookieCutterModel;

  })();

  Pageflow = (function() {

    function Pageflow() {}

    Pageflow.prototype.getStepPath = function() {
      return ['a', 'B', 'c'];
    };

    return Pageflow;

  })();

  Loader = (function() {

    function Loader(view_path) {
      this.view_path = view_path;
    }

    Loader.prototype._load = function(type, nm) {
      var full_nm;
      full_nm = (type === 'tmpl' ? '' : type + '/') + nm + '.' + type + '.html';
      return window.EpicMvc.ParseFile(full_nm, fs.readFileSync(this.view_path + '/' + full_nm, 'utf8'));
    };

    Loader.prototype.template = function(nm) {
      return this._load('tmpl', nm);
    };

    Loader.prototype.page = function(nm) {
      return this._load('page', nm);
    };

    return Loader;

  })();

  Epic = (function() {

    function Epic(model_map) {
      this.model_map = model_map;
      this.oAppConf = {
        getFrames: function() {
          return [];
        }
      };
      this.log1 = console.log;
      this.log2 = console.log;
      this.counter = 1000;
      this.inst = {};
      this.tbl_data = {};
    }

    Epic.prototype.getInstance = function(model) {
      var _base, _ref;
      if (!(model in this.model_map)) {
        throw new Error('EPIC_GETINSTANCE_' + model);
      }
      if ((_ref = (_base = this.inst)[model]) == null) {
        _base[model] = new this.model_map[model](this, model, this.tbl_data[model]);
      }
      return this.inst[model];
    };

    Epic.prototype.destroyInstances = function() {
      return this.inst = {};
    };

    Epic.prototype.nextCounter = function() {
      return this.counter++;
    };

    Epic.prototype.run = function(loader) {
      this.loader = loader;
      return this.oView = new window.EpicMvc.ViewExe(this, this.loader, []);
    };

    Epic.prototype.getView = function() {
      return this.oView;
    };

    Epic.prototype.render = function(template, page) {
      var stuff;
      this.oView.init(template, page);
      stuff = this.oView.run();
      return stuff;
    };

    Epic.prototype.addModel = function(model_name, klass, tbl_data) {
      this.model_map[model_name] = klass;
      if (tbl_data) {
        return this.tbl_data[model_name] = tbl_data;
      }
    };

    return Epic;

  })();

  EpicTemplate = (function() {

    function EpicTemplate(kit, opts) {
      var config, klass, loader, model_map, model_name, _ref, _ref1, _ref2;
      config = opts;
      this.log = kit.services.logger.log;
      (require('./parse.js'))(window);
      (require('./util.js'))(window);
      (require('./ViewExe.js'))(window);
      (require('./TagExe.js'))(window);
      model_map = {
        Pageflow: Pageflow,
        Tag: window.EpicMvc.Model.TagExe$Base
      };
      _ref1 = (_ref = config.model_map) != null ? _ref : {};
      for (model_name in _ref1) {
        klass = _ref1[model_name];
        model_map[model_name] = klass;
      }
      this.oEpic = new Epic(model_map);
      loader = new Loader((_ref2 = config.view_path) != null ? _ref2 : 'config/view');
      this.oEpic.run(loader);
      window.EpicMvc.custom_filter = config.custom_filter;
    }

    EpicTemplate.prototype.render = function(model_name, template, page, tables) {
      var f, stuff;
      f = 'EpicTemplate:render:';
      this.log.debug(f, model_name, template, page);
      this.oEpic.addModel(model_name, CookieCutterModel, tables);
      stuff = this.oEpic.render(template, page);
      this.oEpic.destroyInstances();
      return stuff;
    };

    return EpicTemplate;

  })();

  exports.EpicTemplate = EpicTemplate;

}).call(this);
