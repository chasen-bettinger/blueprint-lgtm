// Generated by CoffeeScript 1.6.3
(function() {
  var AuthParser, E, Q;

  Q = require('q');

  E = require('./error');

  AuthParser = (function() {
    function AuthParser(config, tokenMgr, log) {
      this.config = config;
      this.tokenMgr = tokenMgr;
      this.log = log;
    }

    AuthParser.prototype.parseAuthorization = function(req, res, next) {
      var authHeader, h, p, result, token;
      p = req.params;
      h = req.headers;
      authHeader = false;
      token = false;
      result = false;
      if (h.authorization) {
        authHeader = h.authorization.split(' ', 2);
      }
      token = (authHeader != null ? authHeader.length : void 0) === 2 && authHeader[0].toLowerCase() === 'bearer' ? authHeader[1] : p.auth_token;
      result = token ? this.tokenMgr.decodeAndValidate(token, this.config.key) : {
        err: 'Missing or invalid authorization header'
      };
      req.auth = {
        message: result.err,
        token: result.token,
        authId: result.token ? result.token.uid : null,
        authorize: function(dontSendResponse) {
          var error;
          if (!req.auth.authId) {
            if (!dontSendResponse) {
              error = new E.OAuthError(401, 'invalid_token', req.auth.message);
              res.setHeader('WWW-Authenticate', "Bearer realm=\"blueprint\"");
              res.send(error);
              return next();
            } else {
              return false;
            }
          } else {
            return true;
          }
        }
      };
      return next();
    };

    return AuthParser;

  })();

  exports.AuthParser = AuthParser;

}).call(this);
