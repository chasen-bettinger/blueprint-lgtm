// Generated by CoffeeScript 1.6.3
(function() {
  var E, MCore, Q,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../../error');

  MCore = (function() {
    function MCore(log) {
      this.log = log;
      this.save = __bind(this.save, this);
    }

    MCore.prototype.create = function(model, opts) {
      return (Q.ninvoke(model, 'create', opts)).then(function(doc) {
        return doc;
      });
    };

    MCore.prototype.save = function(doc) {
      return (Q.ninvoke(doc, 'save')).then(function() {
        return null;
      });
    };

    MCore.prototype.update = function(model, where, set, opts) {
      if (!opts) {
        opts = {};
      }
      return (Q.ninvoke(doc, 'update', where, set, opts)).then(function(numberAffected, raw) {
        return {
          numberAffected: numberAffected,
          raw: raw
        };
      });
    };

    MCore.prototype.findByIdAndUpdate = function(id, set, opts) {
      if (!opts) {
        opts = {};
      }
      return (Q.ninvoke(doc, 'findByIdAndUpdate', id, set, opts)).then(function(new_doc) {
        return new_doc;
      });
    };

    MCore.prototype.find = function(model, opts) {
      return (Q.ninvoke(model, 'find', opts)).then(function(docs) {
        return docs;
      });
    };

    MCore.prototype.findOne = function(model, opts) {
      return (Q.ninvoke(model, 'findOne', opts)).then(function(doc) {
        return doc;
      });
    };

    MCore.prototype.findById = function(model, id) {
      return (Q.ninvoke(model, 'findById', id)).then(function(doc) {
        return doc;
      });
    };

    return MCore;

  })();

  exports.MCore = MCore;

}).call(this);
