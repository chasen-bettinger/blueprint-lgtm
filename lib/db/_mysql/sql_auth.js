// Generated by CoffeeScript 1.8.0
(function() {
  var E, Q, SqlAuth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../../error');

  SqlAuth = (function() {
    function SqlAuth(core, kit) {
      this.core = core;
      this.GetById = __bind(this.GetById, this);
      this.log = kit.services.logger.log;
      this.table = 'ident';
      this.cred_col = 'eml';
      this.pwd_col = 'pwd';
      this.schema = {
        auth: ['id', this.pwd_col],
        cred: ['*'],
        Create: [this.cred_col, this.pwd_col],
        UpdateById: [this.cred_col, this.pwd_col],
        GetByKey: {
          id: ['id', this.cred_col]
        },
        reread: ['*']
      };
      this.core.method_factory(this, 'SqlAuth');
    }

    SqlAuth.prototype.GetById = function(ctx, id) {
      return this.GetByKey(ctx, 'id', [id]);
    };

    SqlAuth.prototype.GetAuthCreds = function(ctx, cred_name) {
      var f;
      f = 'DB.SqlAuth.GetAuthCreds:';
      this.log.debug(f, cred_name);
      return Q.resolve().then((function(_this) {
        return function() {
          var sql;
          sql = 'SELECT ' + (_this.schema.auth.join(',')) + ' FROM ' + _this.table + ' WHERE ' + _this.cred_col + '= ? and di= 0';
          return _this.core.sqlQuery(ctx, sql, [cred_name]);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          return db_rows;
        };
      })(this));
    };

    SqlAuth.prototype.GetByCredName = function(ctx, cred_name) {
      var f;
      f = 'DB.SqlAuth.GetByCredName:';
      this.log.debug(f, cred_name);
      return Q.resolve().then((function(_this) {
        return function() {
          var sql;
          sql = 'SELECT ' + (_this.schema.cred.join(',')) + ' FROM ' + _this.table + ' WHERE ' + _this.cred_col + '= ? and di= 0';
          return _this.core.sqlQuery(ctx, sql, [cred_name]);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          return db_rows;
        };
      })(this));
    };

    return SqlAuth;

  })();

  exports.SqlAuth = SqlAuth;

}).call(this);
