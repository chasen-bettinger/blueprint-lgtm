// Generated by CoffeeScript 1.4.0
var E, Q, SqlAuth;

Q = require('q');

E = require('../../error');

SqlAuth = (function() {

  function SqlAuth(db, log) {
    this.db = db;
    this.log = log;
    this.table = 'ident';
    this.cred_col = 'eml';
    this.pwd_col = 'pwd';
    this.schema = {
      auth: ['id', this.pwd_col],
      update_by_id: [this.cred_col, this.pwd_col],
      get_by_cred: ['*'],
      get_by_id: ['id', this.cred_col],
      create: [this.cred_col, this.pwd_col]
    };
    this.db.method_factory(this, 'SqlAuth');
  }

  SqlAuth.prototype.get_auth_credentials = function(ctx, cred_name) {
    var f,
      _this = this;
    f = 'DB.SqlAuth.get_auth_credentials:';
    this.log.debug(f, cred_name);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.auth.join(',')) + ' FROM ' + _this.table + ' WHERE ' + _this.cred_col + '= ? and di= 0';
      return _this.db.sqlQuery(ctx, sql, [cred_name]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlAuth.prototype.get_by_cred_name = function(ctx, cred_name) {
    var f,
      _this = this;
    f = 'DB.SqlAuth.get_by_cred_name:';
    this.log.debug(f, cred_name);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.get_by_cred.join(',')) + ' FROM ' + _this.table + ' WHERE ' + _this.cred_col + '= ? and di= 0';
      return _this.db.sqlQuery(ctx, sql, [cred_name]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  return SqlAuth;

})();

exports.SqlAuth = SqlAuth;
