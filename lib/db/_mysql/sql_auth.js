// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, SqlAuth, cred_col;

  Q = require('q');

  E = require('../../error');

  cred_col = 'eml';

  SqlAuth = (function() {
    function SqlAuth(db, log) {
      this.db = db;
      this.log = log;
      this.table = 'ident';
      this.schema = {
        auth: ['id', 'pwd'],
        update_by_id: ['eml', 'pwd'],
        get_by_cred: ['*'],
        get_by_id: ['id', 'eml'],
        create: ['eml', 'pwd']
      };
      this.db.method_factory(this, 'SqlAuth');
    }

    SqlAuth.prototype.get_auth_credentials = function(ctx, cred_name) {
      var f,
        _this = this;
      f = 'DB.SqlAuth.get_auth_credentials:';
      this.log.debug(f, cred_name);
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT ' + (_this.schema.auth.join(',')) + ' FROM ' + _this.table + ' WHERE ' + cred_col + '= ? and di= 0';
        return _this.db.sqlQuery(ctx, sql, [cred_name]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlAuth.prototype.get_by_cred_name = function(ctx, cred_name) {
      var f,
        _this = this;
      f = 'DB.SqlAuth.get_by_cred_name:';
      this.log.debug(f, cred_name);
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT ' + (_this.schema.get_by_cred.join(',')) + ' FROM ' + _this.table + ' WHERE ' + cred_col + '= ? and di= 0';
        return _this.db.sqlQuery(ctx, sql, [cred_name]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return SqlAuth;

  })();

  exports.SqlAuth = SqlAuth;

}).call(this);
