// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, SqlAuth, cred_col, table,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Q = require('q');

  E = require('../../error');

  table = 'ident';

  cred_col = 'eml';

  SqlAuth = (function() {
    function SqlAuth(db, log) {
      this.db = db;
      this.log = log;
    }

    SqlAuth.prototype.schema = {
      auth: ['id', 'pwd'],
      update_by_ident_id: ['eml', 'pwd']
    };

    SqlAuth.prototype.get_auth_credentials = function(conn, cred_name) {
      var f,
        _this = this;
      f = 'DB.SqlAuth.get_auth_credentials:';
      this.log.debug(f, cred_name);
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT ' + (_this.schema.auth.join(',')) + ' FROM ' + table + ' WHERE ' + cred_col + '= ? and di= 0';
        return _this.db.sqlQuery(conn, sql, [cred_name]);
      }).then(function(db_rows) {
        if (db_rows.length !== 1 || !db_rows[0].pwd) {
          throw new E.OAuthError(401, 'invalid_client');
        }
        return db_rows[0];
      });
    };

    SqlAuth.prototype.update_by_id = function(conn, ident_id, new_values) {
      var f, nm, val,
        _this = this;
      f = 'DB.SqlAuth.update_by_id:';
      this.log.debug(f, ident_id, new_values);
      for (nm in new_values) {
        val = new_values[nm];
        if (__indexOf.call(this.schema.update_by_ident_id, nm) < 0) {
          throw new E.DbError('Invalid Ident Update Column', {
            col: nm,
            value: val
          });
        }
      }
      return Q.resolve().then(function() {
        var arg, cols, sql;
        cols = [];
        arg = [];
        for (nm in new_values) {
          val = new_values[nm];
          cols.push(nm + '= ?');
          arg.push(val);
        }
        arg.push(ident_id);
        sql = 'UPDATE ' + table + ' SET ' + (cols.join(',')) + ' WHERE id= ? AND di= 0';
        return _this.db.sqlQuery(conn, sql, arg);
      }).then(function(db_result) {
        return db_result;
      });
    };

    return SqlAuth;

  })();

  exports.SqlAuth = SqlAuth;

}).call(this);
