// Generated by CoffeeScript 1.6.3
(function() {
  var Pool, Q, SqlCore, mysql,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mysql = require('mysql');

  Pool = require('generic-pool').Pool;

  Q = require('q');

  SqlCore = (function() {
    function SqlCore(config, log) {
      this.AcquireTxConn = __bind(this.AcquireTxConn, this);
      this.pool = Pool({
        name: 'mysql - Blueprint',
        create: function(cb) {
          var conn;
          conn = mysql.createConnection(config);
          return cb(null, conn);
        },
        destroy: function(conn) {
          return conn.end();
        },
        max: config.maxConnections,
        min: config.minConnections,
        idleTimeoutMillis: config.idleTimeoutMillis,
        log: false
      });
      this.acquire = function(callback) {
        return this.pool.acquire(callback);
      };
      this.Acquire = Q.nbind(this.acquire, this);
      this.release = function(conn) {
        return this.pool.release(conn);
      };
      this.destroy = function(conn) {
        return this.pool.destroy(conn);
      };
      this.sqlQuery = function(conn, sql, args) {
        log.debug('sqlQuery:', sql);
        if (args) {
          log.debug('args:', args);
        }
        return (Q.ninvoke(conn, 'query', sql, args)).then(function(rows_n_cols) {
          return rows_n_cols[0];
        });
      };
    }

    SqlCore.prototype.AcquireTxConn = function() {
      var conn,
        _this = this;
      conn = false;
      return this.Acquire().then(function(c) {
        var sql;
        conn = c;
        sql = 'SET TRANSACTION ISOLATION LEVEL SERIALIZABLE';
        return _this.sqlQuery(conn, sql);
      }).then(function(db_result) {
        var sql;
        sql = 'START TRANSACTION';
        return _this.sqlQuery(conn, sql);
      }).then(function(db_result) {
        return conn;
      });
    };

    return SqlCore;

  })();

  exports.SqlCore = SqlCore;

}).call(this);
