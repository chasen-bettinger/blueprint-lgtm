// Generated by CoffeeScript 1.4.0
var E, Q, SqlPSet, SqlPSetItem, SqlPSetItemChange;

Q = require('q');

E = require('../../error');

SqlPSet = (function() {

  function SqlPSet(core, kit) {
    this.log = kit.services.logger.log;
    this.db = core;
    this.table = 'psets';
    this.schema = {
      create: ['name'],
      get_by_id: ['*']
    };
    this.db.method_factory(this, 'SqlPSet');
  }

  SqlPSet.prototype.get_by_name = function(ctx, name) {
    var f,
      _this = this;
    f = "DB:SqlPushSet:get_by_name:";
    this.log.debug(f, name);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT * FROM ' + _this.table + ' WHERE name= ? AND di= 0';
      return _this.db.sqlQuery(ctx, sql, [name]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSet.prototype.read_or_insert = function(ctx, name) {
    var existing_pset, f, _log,
      _this = this;
    f = "DB:SqlPushSet:read_or_insert:";
    _log = ctx.log;
    _log.debug(f, name);
    existing_pset = false;
    return Q.resolve().then(function() {
      return _this.get_by_name(ctx, name);
    }).then(function(db_rows) {
      _log.debug(f, 'got existing PSet:', db_rows);
      if (db_rows.length > 0) {
        existing_pset = db_rows[0];
      }
      if (existing_pset) {
        return false;
      }
      return _this.create(ctx, {
        name: name
      });
    }).then(function(db_result) {
      var id;
      _log.debug(f, 'got create PSet result:', db_result);
      if (db_result === false) {
        return false;
      }
      id = db_result.insertId;
      return _this.get_by_id(ctx, id);
    }).then(function(db_rows) {
      _log.debug(f, 'got re-read:', db_rows);
      if (db_rows !== false) {
        if (db_rows.length !== 1) {
          throw new E.DbError('DB:PUSHSET:REREAD');
        }
        existing_pset = db_rows[0];
      }
      return existing_pset;
    });
  };

  return SqlPSet;

})();

exports.SqlPSet = SqlPSet;

SqlPSetItem = (function() {

  function SqlPSetItem(core, kit) {
    this.log = kit.services.logger.log;
    this.db = core;
    this.table = 'pset_items';
    this.schema = {
      create: ['pset_id', 'xref'],
      get_by_id: ['*'],
      id_xref: ['*'],
      get_psid: ['*'],
      update_by_id: ['count']
    };
    this.db.method_factory(this, 'SqlPSetItem');
  }

  SqlPSetItem.prototype.lock = function(ctx, id) {
    var f, _log,
      _this = this;
    f = "DB:SqlPSetItem:lock:";
    _log = ctx.log;
    _log.debug(f, id);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT id FROM ' + _this.table + ' WHERE id= ? AND di= 0 FOR UPDATE';
      return _this.db.sqlQuery(ctx, sql, [id]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSetItem.prototype.get_psid_xref = function(ctx, pset_id, xref) {
    var f, _log,
      _this = this;
    f = "DB:SqlPSetItem:get_id_xref:";
    _log = ctx.log;
    _log.debug(f, pset_id, xref);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.id_xref.join(',')) + ' FROM ' + _this.table + ' WHERE pset_id= ? AND xref= ? AND di= 0';
      return _this.db.sqlQuery(ctx, sql, [pset_id, xref]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSetItem.prototype.get_by_psid = function(ctx, pset_id) {
    var f, _log,
      _this = this;
    f = "DB:SqlPSetItem:get_by_psid:";
    _log = ctx.log;
    _log.debug(f, pset_id);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.get_psid.join(',')) + ' FROM ' + _this.table + ' WHERE pset_id= ? AND di= 0';
      return _this.db.sqlQuery(ctx, sql, [pset_id]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSetItem.prototype.delete_pset = function(ctx, pset_id) {
    var f, _log,
      _this = this;
    f = "DB:SqlPSetItem:delete_pset:";
    _log = ctx.log;
    _log.debug(f, pset_id);
    return Q.resolve().then(function() {
      var sql;
      sql = 'DELETE FROM ' + _this.table + ' WHERE pset_id= ?';
      return _this.db.sqlQuery(ctx, sql, [pset_id]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  return SqlPSetItem;

})();

exports.SqlPSetItem = SqlPSetItem;

SqlPSetItemChange = (function() {

  function SqlPSetItemChange(core, kit) {
    this.log = kit.services.logger.log;
    this.db = core;
    this.table = 'pset_item_changes';
    this.schema = {
      recent: ['*'],
      create: ['pset_id', 'pset_item_id', 'verb', 'tbl', 'tbl_id', 'prev', 'after', 'resource'],
      next: ['id as count', 'pset_id', 'pset_item_id', 'tbl_id as id', 'verb', 'resource', 'prev', 'after']
    };
    this.db.method_factory(this, 'SqlPSetItemChange');
  }

  SqlPSetItemChange.prototype.delete_items = function(ctx, item_ids) {
    var f, _log,
      _this = this;
    f = "DB:SqlPSetItemChange:delete_items:";
    _log = ctx.log;
    _log.debug(f, item_ids);
    if (!item_ids.length) {
      return {
        affectedRows: 0
      };
    }
    return Q.resolve().then(function() {
      var sql;
      sql = 'DELETE FROM ' + _this.table + ' WHERE pset_item_id IN (?)';
      return _this.db.sqlQuery(ctx, sql, [item_ids]);
    }).then(function(db_result) {
      return db_result;
    });
  };

  SqlPSetItemChange.prototype.GetMostRecentForItem = function(ctx, pset_id, pset_item_id) {
    var f,
      _this = this;
    f = "DB:SqlPSetItemChange:GetMostRecentForItem:";
    ctx.log.debug(f);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.recent.join(',')) + ' FROM ' + _this.table + ' WHERE di= 0 AND pset_id= ? AND pset_item_id= ?' + ' ORDER BY id DESC LIMIT 1';
      return _this.db.sqlQuery(ctx, sql, [pset_id, pset_item_id]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSetItemChange.prototype.GetMostRecentChanges = function(ctx, limit) {
    var f,
      _this = this;
    f = "DB:SqlPSetItemChange:GetMostRecentChanges:";
    ctx.log.debug(f);
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.next.join(',')) + ' FROM ' + ' (SELECT * FROM ' + _this.table + ' WHERE di= 0' + ' ORDER BY id DESC LIMIT ?) sub' + ' ORDER BY id ASC';
      return _this.db.sqlQuery(ctx, sql, [limit]);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlPSetItemChange.prototype.GetNext = function(ctx, from, limit) {
    var args, f, sql_from, sql_limit,
      _this = this;
    f = "DB:SqlPSetItemChange:GetNext:";
    args = [];
    sql_from = '';
    sql_limit = '';
    if (typeof from === 'number') {
      sql_from = ' AND id > ?';
      args.push(from);
    }
    if (typeof limit === 'number') {
      sql_limit = 'LIMIT ?';
      args.push(limit);
    }
    return Q.resolve().then(function() {
      var sql;
      sql = 'SELECT ' + (_this.schema.next.join(',')) + ' FROM ' + _this.table + ' WHERE di= 0' + sql_from + ' ORDER BY count ' + sql_limit;
      return _this.db.sqlQuery(ctx, sql, args);
    }).then(function(db_rows) {
      return db_rows;
    });
  };

  return SqlPSetItemChange;

})();

exports.SqlPSetItemChange = SqlPSetItemChange;
