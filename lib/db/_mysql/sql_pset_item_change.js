// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, SqlPSetItemChange;

  Q = require('q');

  E = require('../../error');

  SqlPSetItemChange = (function() {
    function SqlPSetItemChange(db, log) {
      this.db = db;
      this.log = log;
      this.table = 'pset_item_changes';
      this.schema = {
        create: ['pset_id', 'pset_item_id', 'verb', 'tbl', 'tbl_id', 'prev', 'after', 'resource'],
        get_recent: ['id as count', 'pset_id', 'pset_item_id', 'tbl_id as id', 'verb', 'resource', 'prev', 'after']
      };
      this.db.method_factory(this, 'SqlPSetItemChange');
    }

    SqlPSetItemChange.prototype.delete_items = function(ctx, item_ids) {
      var f, _log,
        _this = this;
      f = "DB:SqlPSetItemChange:delete_items:";
      _log = ctx.log;
      _log.debug(f, item_ids);
      if (!item_ids.length) {
        return {
          affectedRows: 0
        };
      }
      return Q.resolve().then(function() {
        var sql;
        sql = 'DELETE FROM ' + _this.table + ' WHERE pset_item_id IN (?)';
        return _this.db.sqlQuery(ctx, sql, [item_ids]);
      }).then(function(db_result) {
        return db_result;
      });
    };

    SqlPSetItemChange.prototype.get_recent = function(ctx, limit, from) {
      var args, f, sql_from, sql_limit,
        _this = this;
      f = "DB:SqlPSetItemChange:get_recent:";
      args = [];
      sql_from = '';
      sql_limit = '';
      if (typeof from === 'number') {
        sql_from = ' AND id > ?';
        args.push(from);
      }
      if (typeof limit === 'number') {
        sql_limit = 'LIMIT ?';
        args.push(limit);
      }
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT ' + (_this.schema.get_recent.join(',')) + ' FROM ' + _this.table + ' WHERE di= 0' + sql_from + ' ORDER BY id ' + sql_limit;
        return _this.db.sqlQuery(ctx, sql, args);
      }).then(function(db_result) {
        return db_result;
      });
    };

    return SqlPSetItemChange;

  })();

  exports.SqlPSetItemChange = SqlPSetItemChange;

}).call(this);
