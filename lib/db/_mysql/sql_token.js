// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, SqlToken, table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../../error');

  table = 'ident_tokens';

  SqlToken = (function() {
    function SqlToken(db, tokenMgr, log) {
      this.tokenMgr = tokenMgr;
      this.create_ident_token = __bind(this.create_ident_token, this);
      this.log = log;
      this.db = db;
    }

    SqlToken.prototype.schema = {
      find: ['ident_id', 'client'],
      insert: ['token', 'ident_id', 'client', 'exp', 'cr']
    };

    SqlToken.prototype.find_token = function(conn, token) {
      var sql;
      sql = 'SELECT ' + (this.schema.find.join(',')) + ' FROM ' + table + ' WHERE token = ? AND exp > CURDATE()';
      return (this.db.sqlQuery(conn, sql, [token])).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlToken.prototype.insert_token = function(conn, token, user_id, client_id, expires) {
      var sql;
      sql = 'INSERT INTO ' + table + ' (' + (this.schema.insert.join(',')) + ') VALUES (?,?,?,?,NULL)';
      return (this.db.sqlQuery(conn, sql, [token, user_id, client_id, expires])).then(function(db_result) {
        return db_result;
      });
    };

    SqlToken.prototype.delete_token = function(conn, token) {
      var sql;
      sql = 'DELETE FROM ' + table + ' WHERE token = ?';
      return (this.db.sqlQuery(conn, sql, [token])).then(function(db_result) {
        return db_result;
      });
    };

    SqlToken.prototype.create_ident_token = function(conn, user_id, clientId, expires, current_ident_token) {
      var new_token,
        _this = this;
      new_token = false;
      return Q.resolve().then(function() {
        return _this.tokenMgr.CreateToken(16);
      }).then(function(token) {
        new_token = token;
        if (!current_ident_token) {
          return false;
        }
        return _this.delete_token(conn, current_ident_token);
      }).then(function(db_result) {
        return _this.insert_token(conn, new_token, user_id, clientId, expires);
      }).then(function(db_result) {
        if (db_result.affectedRows !== 1) {
          throw new E.DbError('Refresh Token Insert Failed');
        }
        return new_token;
      });
    };

    return SqlToken;

  })();

  exports.SqlToken = SqlToken;

}).call(this);
