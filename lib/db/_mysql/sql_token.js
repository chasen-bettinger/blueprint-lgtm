// Generated by CoffeeScript 1.4.0
var E, Q, SqlToken, table,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Q = require('q');

E = require('../../error');

table = 'ident_tokens';

SqlToken = (function() {

  function SqlToken(core, kit) {
    this.update_active_token = __bind(this.update_active_token, this);
    this.log = kit.services.logger.log;
    this.db = core;
    this.schema = {
      find: ['ident_id', 'client'],
      insert: ['token', 'ident_id', 'client', 'exp', 'cr']
    };
  }

  SqlToken.prototype.find_token = function(ctx, token) {
    var sql;
    sql = 'SELECT ' + (this.schema.find.join(',')) + ' FROM ' + table + ' WHERE token = ? AND exp > CURDATE()';
    return (this.db.sqlQuery(ctx, sql, [token])).then(function(db_rows) {
      return db_rows;
    });
  };

  SqlToken.prototype.insert_token = function(ctx, token, user_id, client_id, expires) {
    var sql;
    sql = 'INSERT INTO ' + table + ' (' + (this.schema.insert.join(',')) + ') VALUES (?,?,?,?,NULL)';
    return (this.db.sqlQuery(ctx, sql, [token, user_id, client_id, expires])).then(function(db_result) {
      return db_result;
    });
  };

  SqlToken.prototype.delete_token = function(ctx, token) {
    var sql;
    sql = 'DELETE FROM ' + table + ' WHERE token = ?';
    return (this.db.sqlQuery(ctx, sql, [token])).then(function(db_result) {
      return db_result;
    });
  };

  SqlToken.prototype.update_active_token = function(ctx, user_id, clientId, expires, new_token, current_ident_token) {
    var _this = this;
    return Q.resolve().then(function() {
      if (!current_ident_token) {
        return false;
      }
      return _this.delete_token(ctx, current_ident_token);
    }).then(function(db_result) {
      return _this.insert_token(ctx, new_token, user_id, clientId, expires);
    }).then(function(db_result) {
      if (db_result.affectedRows !== 1) {
        throw new E.DbError('Refresh Token Insert Failed');
      }
      return new_token;
    });
  };

  return SqlToken;

})();

exports.SqlToken = SqlToken;
