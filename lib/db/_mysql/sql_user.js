// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, SqlUser, ident_tbl, table,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Q = require('q');

  E = require('../../error');

  ident_tbl = 'ident';

  table = 'profile';

  SqlUser = (function() {
    function SqlUser(db, log) {
      this.db = db;
      this.log = log;
    }

    SqlUser.prototype.schema = {
      get_ident_id: ['i.id', 'i.eml', 'e.fnm', 'e.lnm', 'e.cr', 'e.mo', 'e.website', 'e.avatar_path', 'e.avatar_thumb', 'e.prog_lang', 'e.skill_lvl'],
      update_by_ident_id: ['fnm', 'lnm', 'website', 'avatar_path', 'avatar_thumb', 'prog_lang', 'skill_lvl'],
      create: ['first_name', 'last_name', 'email', 'password']
    };

    SqlUser.prototype.get_all = function(conn) {
      var f,
        _this = this;
      f = 'DB.SqlUser.get_all:';
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT * FROM ' + table;
        return _this.db.sqlQuery(conn, sql);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlUser.prototype.create = function(conn, new_values) {
      var f, nm, val,
        _this = this;
      f = 'DB.SqlUser.create:';
      this.log.debug(f, new_values);
      for (nm in new_values) {
        val = new_values[nm];
        if (__indexOf.call(this.schema.create, nm) < 0) {
          throw new E.ServerError('Invalid User Insert Column', {
            col: nm,
            value: val
          });
        }
      }
      return Q.resolve().then(function() {
        var arg, cols, qs, sql;
        cols = [];
        qs = [];
        arg = [];
        for (nm in new_values) {
          val = new_values[nm];
          cols.push(nm);
          qs.push('?');
          arg.push(val);
        }
        sql = 'INSERT INTO ' + table + ' (' + (cols.join(',')) + ') VALUES (' + (qs.join(',')) + ')';
        return _this.db.sqlQuery(conn, sql, arg);
      }).then(function(db_result) {
        _this.log.debug(f, db_result);
        if (db_result.affectedRows !== 1) {
          throw new E.DbError('User Insert Failed');
        }
        return db_result;
      });
    };

    SqlUser.prototype.update_by_ident_id = function(conn, ident_id, new_values) {
      var f, nm, val,
        _this = this;
      f = 'DB.SqlUser.update:';
      this.log.debug(f, ident_id, new_values);
      for (nm in new_values) {
        val = new_values[nm];
        if (__indexOf.call(this.schema.update_by_ident_id, nm) < 0) {
          throw new E.DbError('Invalid User Update Column', {
            col: nm,
            value: val
          });
        }
      }
      return Q.resolve().then(function() {
        var arg, cols, sql;
        cols = [];
        arg = [];
        for (nm in new_values) {
          val = new_values[nm];
          cols.push(nm + '= ?');
          arg.push(val);
        }
        arg.push(ident_id);
        sql = 'UPDATE ' + table + ' SET ' + (cols.join(',')) + ' WHERE ident_id= ? AND di= 0';
        return _this.db.sqlQuery(conn, sql, arg);
      }).then(function(db_result) {
        return db_result;
      });
    };

    SqlUser.prototype.get_by_ident_id = function(conn, ident_id) {
      var f,
        _this = this;
      f = 'DB.SqlUser.get_by_ident_id:';
      this.log.debug(f, ident_id);
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT ' + (_this.schema.get_ident_id.join(',')) + ' FROM ' + ident_tbl + ' i LEFT OUTER JOIN ' + table + ' e' + ' ON i.id= e.ident_id WHERE i.id= ? AND i.di= 0 AND (e.di= 0 OR e.id IS NULL)';
        return _this.db.sqlQuery(conn, sql, [ident_id]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return SqlUser;

  })();

  exports.SqlUser = SqlUser;

}).call(this);
