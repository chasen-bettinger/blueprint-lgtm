// Generated by CoffeeScript 1.8.0
(function() {
  var Db, path;

  path = require('path');

  Db = (function() {
    function Db(kit) {
      var MCore, MongoClient, SqlCore, config, log, mod, modPath, model, nm, _ref, _ref1;
      log = kit.services.logger.log;
      config = kit.services.config;
      this.config_mongo = false;
      if (config.db.mysql.enable) {
        log.info('Initializing MySql...');
        SqlCore = require('./_mysql/sql_core').SqlCore;
        this.mysql = {
          core: new SqlCore(config.db.mysql.pool, log)
        };
        _ref = config.db.mysql.modules;
        for (nm in _ref) {
          mod = _ref[nm];
          if (!mod.enable) {
            continue;
          }
          modPath = path.join(config.processDir, mod.file);
          this.mysql[nm] = new (require(modPath))[mod["class"]](this.mysql.core, kit);
        }
      }
      if (config.db.mongo.enable) {
        log.info('Initializing MongoDB...');
        this.config_mongo = config.db.mongo;
        MongoClient = require('mongodb').MongoClient;
        MCore = require('./_mongo/model_core').MCore;
        this.mongo = {
          pool: {},
          core: new MCore(log)
        };
        _ref1 = config.db.mongo.models;
        for (nm in _ref1) {
          model = _ref1[nm];
          if (!model.enable) {
            continue;
          }
          modPath = path.join(config.processDir, model.file);
          this.mongo[nm] = (require(modPath)).init(mongoose, this.mongo.core);
        }
      }
    }

    Db.prototype.server_init_promise = function(kit, promise_chain) {
      var f, nm, pool, _ref;
      f = 'Db:server_init';
      if (this.config_mongo === false) {
        return promise_chain;
      }
      _ref = this.config_mongo.pool;
      for (nm in _ref) {
        pool = _ref[nm];
        if (!pool.enable) {
          continue;
        }
        promise_chain = promise_chain.then(Q(MongoClient.connect(pool.connect_url, pool.options)));
        promise_chain = promise_chain.then((function(_this) {
          return function(db) {
            if (db == null) {
              throw new Error(f + 'MongoDB connection is empty');
            }
            return _this.mongo.pool[nm] = db;
          };
        })(this));
      }
      return promise_chain;
    };

    return Db;

  })();

  exports.Db = Db;

}).call(this);
