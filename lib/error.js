// Generated by CoffeeScript 1.8.0
(function() {
  var AccessDenied, BasicAuthError, DbError, InvalidArg, MissingArg, MongoDbError, NotFoundError, OAuthError, ServerControlledException, ServerError, TooManyConnectionsError, restify, util;

  restify = require('restify');

  util = require('util');

  ServerControlledException = function(old_code, title, text, commands, goto) {
    var server_control;
    if (typeof goto !== 'string') {
      throw new Error('lib/error::ServerControlledException: Missing "goto" in function arguments');
    }
    if (typeof commands !== 'string') {
      commands = commands.join('~');
    }
    server_control = {
      title: title,
      text: text,
      commands: commands,
      goto: goto
    };
    restify.RestError.call(this, {
      statusCode: 420,
      body: {
        error: 'ServerControl',
        message: 'See server_control',
        old_code: old_code,
        server_control: server_control
      },
      constructorOpt: ServerControlledException
    });
    return this.name = 'Server Controlled Exception';
  };

  util.inherits(ServerControlledException, restify.RestError);

  exports.ServerControlledException = ServerControlledException;

  InvalidArg = function(message) {
    restify.RestError.call(this, {
      statusCode: 400,
      body: {
        error: 'InvalidParam',
        message: message
      },
      constructorOpt: InvalidArg
    });
    return this.name = 'Invalid Argument';
  };

  util.inherits(InvalidArg, restify.RestError);

  exports.InvalidArg = InvalidArg;

  MissingArg = function(message) {
    restify.RestError.call(this, {
      statusCode: 400,
      body: {
        error: 'MissingParam',
        message: message
      },
      constructorOpt: MissingArg
    });
    return this.name = 'Missing Argument';
  };

  util.inherits(MissingArg, restify.RestError);

  exports.MissingArg = MissingArg;

  NotFoundError = function(token, message) {
    restify.RestError.call(this, {
      statusCode: 404,
      body: {
        error: token,
        message: message
      },
      constructorOpt: NotFoundError
    });
    return this.name = 'Resource Not Found';
  };

  util.inherits(NotFoundError, restify.RestError);

  exports.NotFoundError = NotFoundError;

  OAuthError = function(code, error, message) {
    var body;
    body = message ? {
      error: error,
      message: message
    } : {
      error: error
    };
    restify.RestError.call(this, {
      statusCode: code,
      restCode: 'OAuthError',
      message: 'Invalid OAuth Request',
      body: body,
      constructorOpt: OAuthError
    });
    return this.name = 'OAuth 2.0 Error';
  };

  util.inherits(OAuthError, restify.RestError);

  exports.OAuthError = OAuthError;

  BasicAuthError = function(error, message) {
    var body;
    body = message ? {
      error: error,
      message: message
    } : {
      error: error
    };
    restify.RestError.call(this, {
      statusCode: 401,
      restCode: 'BasicAuthError',
      message: 'Invalid Basic Auth Request',
      body: body,
      constructorOpt: BasicAuthError
    });
    return this.name = 'OAuth 2.0 Error';
  };

  util.inherits(BasicAuthError, restify.RestError);

  exports.BasicAuthError = BasicAuthError;

  AccessDenied = function(token, message) {
    restify.RestError.call(this, {
      statusCode: 403,
      body: {
        error: token,
        message: message
      },
      constructorOpt: AccessDenied
    });
    return this.name = 'Access Denied';
  };

  util.inherits(AccessDenied, restify.RestError);

  exports.AccessDenied = AccessDenied;

  DbError = function(token) {
    restify.RestError.call(this, {
      statusCode: 500,
      restCode: 'DatabaseError',
      body: {
        error: token
      },
      constructorOpt: DbError
    });
    return this.name = 'Database Error';
  };

  util.inherits(DbError, restify.RestError);

  exports.DbError = DbError;

  ServerError = function(token, message) {
    restify.RestError.call(this, {
      statusCode: 500,
      restCode: 'ServerError',
      body: {
        error: token,
        message: message
      },
      constructorOpt: ServerError
    });
    return this.name = 'Server Error';
  };

  util.inherits(ServerError, restify.RestError);

  exports.ServerError = ServerError;

  MongoDbError = function(message) {
    restify.RestError.call(this, {
      statusCode: 500,
      restCode: 'MongoDbError',
      message: message,
      body: {
        error: 'mongo_error',
        message: message
      },
      constructorOpt: MongoDbError
    });
    return this.name = 'Mongo Database Error';
  };

  util.inherits(MongoDbError, restify.RestError);

  exports.MongoDbError = MongoDbError;

  TooManyConnectionsError = function(message) {
    restify.RestError.call(this, {
      statusCode: 426,
      restCode: 'TooManyConnectionsError',
      message: message,
      body: {
        error: 'too_many_connections_error',
        message: message
      },
      constructorOpt: TooManyConnectionsError
    });
    return this.name = 'Too Many ConnectionsError Error';
  };

  util.inherits(TooManyConnectionsError, restify.RestError);

  exports.TooManyConnectionsError = TooManyConnectionsError;

}).call(this);
