// Generated by CoffeeScript 1.6.3
(function() {
  var AccessDenied, DbError, InvalidArg, MongoDbError, restify, success, util;

  restify = require('restify');

  util = require('util');

  success = false;

  InvalidArg = function(message, data) {
    restify.RestError.call(this, {
      statusCode: 400,
      restCode: 'InvalidArgument',
      message: message,
      body: {
        code: 'InvalidArgument',
        success: success,
        message: message,
        data: data
      },
      constructorOpt: InvalidArg
    });
    return this.name = 'Invalid Argument';
  };

  util.inherits(InvalidArg, restify.RestError);

  exports.InvalidArg = InvalidArg;

  AccessDenied = function(message, data) {
    restify.RestError.call(this, {
      statusCode: 403,
      restCode: 'AccessDenied',
      message: message,
      body: {
        code: 'AccessDenied',
        success: success,
        message: message,
        data: data
      },
      constructorOpt: AccessDenied
    });
    return this.name = 'Access Denied';
  };

  util.inherits(AccessDenied, restify.RestError);

  exports.AccessDenied = AccessDenied;

  DbError = function(message, data) {
    restify.RestError.call(this, {
      statusCode: 500,
      restCode: 'DatabaseError',
      message: message,
      body: {
        code: 'DatabaseError',
        success: success,
        message: message,
        data: data
      },
      constructorOpt: DbError
    });
    return this.name = 'Database Error';
  };

  util.inherits(DbError, restify.RestError);

  exports.DbError = DbError;

  MongoDbError = function(message, data) {
    restify.RestError.call(this, {
      statusCode: 500,
      restCode: 'DatabaseError',
      message: message,
      body: {
        code: 'DatabaseError',
        success: success,
        message: message,
        data: data
      },
      constructorOpt: MongoDbError
    });
    return this.name = 'Mongo Database Error';
  };

  util.inherits(MongoDbError, restify.RestError);

  exports.MongoDbError = MongoDbError;

}).call(this);
