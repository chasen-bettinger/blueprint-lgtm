// Generated by CoffeeScript 1.9.2
(function() {
  var Kit,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  Kit = (function() {
    function Kit() {
      this.new_service = bind(this.new_service, this);
      this.services = {};
      this.routes = {};
    }

    Kit.prototype.get_service_deps_needed = function(name, constructor) {
      var d, i, len, needed, nm, ref, results;
      d = constructor.deps;
      if (!d) {
        throw new Error("Module '" + name + "' is missing @deps");
      }
      needed = [];
      ref = d.services || [];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        nm = ref[i];
        if (!(nm in this.services)) {
          results.push(needed.push(nm));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Kit.prototype.add_service = function(name, obj) {
      return this.services[name] = obj;
    };

    Kit.prototype.new_service = function(name, constructor, args) {
      var _a, _t, d, i, len, n, needs, ref;
      d = constructor.deps;
      if (!d) {
        throw new Error("Module '" + name + "' is missing @deps");
      }
      needs = (ref = d.services) != null ? ref : [];
      if (d.mysql || d.mongo) {
        needs.push('db');
      }
      for (i = 0, len = needs.length; i < len; i++) {
        n = needs[i];
        if (!(n in this.services)) {
          throw new Error("Module '" + name + "' requires service '" + n + "'");
        }
      }
      _t = this;
      _a = args != null ? args : [];
      return this.services[name] = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(constructor, [_t].concat(slice.call(_a)), function(){});
    };

    Kit.prototype.add_route_service = function(name, obj) {
      return this.routes[name] = obj;
    };

    Kit.prototype.new_route_service = function(name, constructor, args) {
      var _a, _t;
      _t = this;
      _a = args != null ? args : [];
      return this.routes[name] = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(constructor, [_t].concat(slice.call(_a)), function(){});
    };

    return Kit;

  })();

  exports.Kit = Kit;

}).call(this);
