// Generated by CoffeeScript 1.4.0
var CircularBuffer, PollManager, _, _log, _log2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

CircularBuffer = require('./circular_buffer').CircularBuffer;

_log = false;

_log2 = {
  debug: function() {}
};

PollManager = (function() {

  function PollManager(kit) {
    this.C_ChangesRemovedFromBuffer = __bind(this.C_ChangesRemovedFromBuffer, this);

    this.C_ChangesAddedToBuffer = __bind(this.C_ChangesAddedToBuffer, this);

    this.C_PushChangesReceived = __bind(this.C_PushChangesReceived, this);
    _log = kit.services.logger.log;
    _log2 = kit.services.logger.log;
    this.config = kit.services.config.push_service;
    this.push = kit.services.push;
    this.buffer = new CircularBuffer(this.C_ChangesAddedToBuffer, this.C_ChangesRemovedFromBuffer, this.config.max_buffer_size);
    this.pollers = {};
    this.pollers_msgs = {};
    this.registry = {};
  }

  PollManager.prototype.server_init = function(kit) {
    var f;
    f = 'PollManager:server_init:';
    this.push.RegisterForChanges(this.C_PushChangesReceived);
    return this.push.Start();
  };

  PollManager.prototype.AddPoller = function(id, req, res, listen, state) {
    var count, f, handle, item, nm, partial_handle, pset, _base, _ref, _ref1;
    f = 'PollManager:AddPoller:';
    this.pollers[id] = {
      req: req,
      res: res,
      state: state,
      listen: listen,
      handles: [],
      handle_map: {}
    };
    for (nm in listen) {
      handle = listen[nm];
      _ref = handle.split('/'), pset = _ref[0], item = _ref[1], count = _ref[2];
      partial_handle = pset + '/' + item;
      if ((_ref1 = (_base = this.registry)[partial_handle]) == null) {
        _base[partial_handle] = [];
      }
      this.registry[partial_handle].push(id);
      this.pollers[id].handles.push(partial_handle);
      this.pollers[id].handle_map[partial_handle] = nm;
    }
    return _log2.debug(f, 'handle_map:', this.pollers[id].handle_map);
  };

  PollManager.prototype.PollerTimedOut = function(id) {
    return this.S_Finish(id);
  };

  PollManager.prototype.PollerClosed = function(id) {
    return this.S_CleanupPoller(id);
  };

  PollManager.prototype.S_ProcessChanges = function(raw_changes) {
    var f;
    f = 'LongPoll:C_ProcessChanges:';
    return this.S_RespondWithChanges(this.S_FormatChanges(this.S_SortChanges(raw_changes)));
  };

  PollManager.prototype.S_SortChanges = function(raw_changes) {
    var f, partial_handle, rec, sorted_changes, _i, _len, _ref;
    f = 'Push:S_SortChanges:';
    sorted_changes = {};
    for (_i = 0, _len = raw_changes.length; _i < _len; _i++) {
      rec = raw_changes[_i];
      if (rec.verb === 'init') {
        continue;
      }
      partial_handle = "" + rec.pset_id + "/" + rec.pset_item_id;
      if ((_ref = sorted_changes[partial_handle]) == null) {
        sorted_changes[partial_handle] = [];
      }
      rec.after = JSON.parse(rec.after);
      rec.prev = JSON.parse(rec.prev);
      sorted_changes[partial_handle].push(_.pick(rec, ['id', 'count', 'verb', 'prev', 'after', 'resource']));
    }
    return sorted_changes;
  };

  PollManager.prototype.S_FormatChanges = function(sorted_changes) {
    var change, change_list, data, f, formatted_changes, ph, _base, _i, _len, _name, _ref;
    f = 'LongPoll:S_FormatChanges:';
    data = {};
    formatted_changes = [];
    for (ph in sorted_changes) {
      change_list = sorted_changes[ph];
      data[ph] = {
        sync: {},
        partial_handle: ph
      };
      for (_i = 0, _len = change_list.length; _i < _len; _i++) {
        change = change_list[_i];
        if (!(data[ph].count > change.count)) {
          data[ph].count = change.count;
        }
        if ((_ref = (_base = data[ph].sync)[_name = change.resource]) == null) {
          _base[_name] = [];
        }
        data[ph].sync[change.resource].push(change);
      }
      formatted_changes.push(data[ph]);
    }
    return formatted_changes;
  };

  PollManager.prototype.S_RespondWithChanges = function(formatted_changes) {
    var change, f, h, id, nm, req_needs_response, _base, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    f = 'LongPoll:S_RespondWithChanges:';
    req_needs_response = [];
    for (_i = 0, _len = formatted_changes.length; _i < _len; _i++) {
      change = formatted_changes[_i];
      _log2.debug(f, "got count:" + change.count + " handle: " + change.partial_handle);
      _log2.debug(f, "got sync:", change.sync);
      h = change.partial_handle;
      _ref1 = (_ref = this.registry[h]) != null ? _ref : [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        if (__indexOf.call(req_needs_response, id) < 0) {
          req_needs_response.push(id);
        }
        nm = this.pollers[id].handle_map[h];
        if ((_ref2 = (_base = this.pollers_msgs)[id]) == null) {
          _base[id] = {};
        }
        this.pollers_msgs[id][nm] = change.sync;
        this.pollers[id].listen[nm] = h + '/' + change.count;
      }
      this.registry[h] = [];
    }
    _results = [];
    for (_k = 0, _len2 = req_needs_response.length; _k < _len2; _k++) {
      id = req_needs_response[_k];
      _results.push(this.S_Finish(id));
    }
    return _results;
  };

  PollManager.prototype.S_Finish = function(id) {
    var f, listen, new_state, req, res, state, _ref;
    f = 'LongPoll:S_Finish:';
    _log2.debug(f, id);
    if (!(id in this.pollers)) {
      return;
    }
    _ref = this.pollers[id], req = _ref.req, res = _ref.res, state = _ref.state, listen = _ref.listen;
    req.connection.resume();
    new_state = state;
    if (id in this.pollers_msgs) {
      _log2.debug(f, 'res end w/msgs', new_state, this.pollers_msgs[id]);
      res.send({
        state: new_state,
        listen: listen,
        sync: this.pollers_msgs[id]
      });
    } else {
      _log2.debug(f, 'res end w/o msgs', new_state);
      res.send({
        state: new_state,
        listen: listen,
        sync: {}
      });
    }
    return this.S_CleanupPoller(id);
  };

  PollManager.prototype.S_CleanupPoller = function(id) {
    var f, handle, ix, _i, _len, _ref;
    f = 'LongPoll:S_CleanupPoller:';
    _log2.debug(f, id);
    if (!(id in this.pollers)) {
      return;
    }
    _ref = this.pollers[id].handles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      handle = _ref[_i];
      _log2.debug(f, "remove id:" + id + " from registry:" + handle, this.registry[handle]);
      ix = this.registry[handle].indexOf(id);
      if (ix > -1) {
        this.registry[handle].splice(ix, 1);
      }
    }
    delete this.pollers[id];
    return delete this.pollers_msgs[id];
  };

  PollManager.prototype.C_PushChangesReceived = function(raw_changes) {
    var f;
    f = 'PollManager:C_PushChangesReceived:';
    _log.debug(f, {
      raw_changes: raw_changes
    });
    return this.buffer.push(raw_changes, function(err) {
      if (err) {
        return _log.error(f, err, err.stack);
      }
    });
  };

  PollManager.prototype.C_ChangesAddedToBuffer = function(raw_changes, cb) {
    var f;
    f = 'PollManager:C_ChangesAddedToBuffer:';
    _log.debug(f, {
      raw_changes: raw_changes
    });
    this.S_ProcessChanges(raw_changes);
    return cb(null);
  };

  PollManager.prototype.C_ChangesRemovedFromBuffer = function(raw_changes) {
    var f;
    f = 'PollManager:C_ChangesRemovedFromBuffer:';
    return _log.debug(f, {
      raw_changes: raw_changes
    });
  };

  return PollManager;

})();

exports.PollManager = PollManager;
