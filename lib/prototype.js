// Generated by CoffeeScript 1.6.3
(function() {
  var E, Prototype, PrototypeModule, Q, _, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../lib/error');

  _ = require('lodash');

  _log = false;

  Prototype = (function() {
    function Prototype(kit) {
      var f;
      f = 'Prototype:constructor';
      this.log = kit.services.logger.log;
      this.log.info('Initializing Prototype...');
    }

    Prototype.prototype.server_init = function(kit) {
      var f, mod, protos, push, q_result, wrapper, _i, _len,
        _this = this;
      f = 'Prototype:server_init:';
      push = kit.services.push;
      wrapper = kit.services.wrapper;
      protos = kit.services.config.prototype.modules;
      q_result = Q.resolve(true);
      for (_i = 0, _len = protos.length; _i < _len; _i++) {
        mod = protos[_i];
        if (mod.enable) {
          (function(mod) {
            return q_result = q_result.then(function() {
              var ctx;
              ctx = {
                conn: null,
                log: _this.log
              };
              return push.GetPushSet(ctx, true, "Prototype:" + mod.name);
            }).then(function(pset) {
              kit.add_route_service(mod.name, new PrototypeModule(mod, pset));
              return wrapper.add(mod.name);
            });
          })(mod);
        }
      }
      return q_result;
    };

    return Prototype;

  })();

  PrototypeModule = (function() {
    function PrototypeModule(mod, pset) {
      var dataset, f, nm, _ref;
      this.mod = mod;
      this.pset = pset;
      this._delete = __bind(this._delete, this);
      this._update = __bind(this._update, this);
      this._create = __bind(this._create, this);
      this._get = __bind(this._get, this);
      f = "PrototypeModule:constructor:";
      this.resource = {};
      this.endpoints = {};
      _ref = this.mod.datasets;
      for (nm in _ref) {
        dataset = _ref[nm];
        this.resource[nm] = {
          table: [],
          idx: {},
          counter: 0
        };
        this.endpoints["get" + nm] = {
          verb: 'get',
          route: "/Prototype/" + this.mod.name + "/" + nm,
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this._get, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["get_by_id" + nm] = {
          verb: 'get',
          route: "/Prototype/" + this.mod.name + "/" + nm + "/:r0id",
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this._get, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["create" + nm] = {
          verb: 'post',
          route: "/Prototype/" + this.mod.name + "/" + nm,
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this._create, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["update" + nm] = {
          verb: 'put',
          route: "/Prototype/" + this.mod.name + "/" + nm + "/:r0id/update",
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this._update, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["delete" + nm] = {
          verb: 'del',
          route: "/Prototype/" + this.mod.name + "/" + nm + "/:r0id/delete",
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this._delete, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
      }
    }

    PrototypeModule.prototype.proto_wrap = function(func, resource) {
      return function(ctx, pre_loaded) {
        return func(ctx, pre_loaded, resource);
      };
    };

    PrototypeModule.prototype._get = function(ctx, pre_loaded, resource) {
      var f, get_one, p, r, r0id, result, use_doc,
        _this = this;
      use_doc = {};
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      _log = ctx.log;
      f = "Prototype:_get:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      get_one = p.r0id != null;
      r0id = Number(p.r0id);
      result = {};
      if (p.r0id) {
        if (!(r0id in r.idx)) {
          throw new E.NotFoundError("PROTO:GET:" + this.mod.name + ":" + resource + ":r0id");
        }
      }
      return Q.resolve().then(function() {
        if (get_one) {
          result[resource] = [r.idx[r0id]];
        } else {
          result[resource] = r.table;
        }
        return _this.pset.getItem(ctx, 0);
      }).then(function(push_handle) {
        result.push = push_handle;
        result.success = true;
        return {
          send: result
        };
      });
    };

    PrototypeModule.prototype._create = function(ctx, pre_loaded, resource) {
      var col, conn, f, p, r, rec, result, schema, use_doc,
        _this = this;
      use_doc = this.mod.datasets[resource];
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:_create:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      schema = this.mod.datasets[resource];
      rec = {};
      result = {};
      for (col in schema) {
        if (!(col in p)) {
          throw new E.MissingArg(col);
        }
        rec[col] = p[col];
      }
      rec.id = r.counter++;
      return Q.resolve().then(function() {
        r.table.push(rec);
        r.idx[rec.id] = rec;
        result[resource] = [rec];
        return _this.pset.itemChange(ctx, 0, 'add', {}, rec, rec.id, resource);
      }).then(function() {
        result.success = true;
        return {
          send: result
        };
      });
    };

    PrototypeModule.prototype._update = function(ctx, pre_loaded, resource) {
      var batch_ids, conn, f, id, new_values, nm, p, q_result, r, r0id, result, schema, use_doc, val, _fn, _i, _j, _len, _len1,
        _this = this;
      use_doc = this.mod.datasets[resource];
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:_update:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      schema = this.mod.datasets[resource];
      new_values = {};
      result = {};
      if (p.r0id === 'batch') {
        batch_ids = (function() {
          var _i, _len, _ref, _results;
          _ref = p.batch_ids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(Number(id));
          }
          return _results;
        })();
        if (!batch_ids.length) {
          throw new E.MissingArg('batch_ids');
        }
      } else {
        batch_ids = [Number(p.r0id)];
      }
      for (nm in p) {
        val = p[nm];
        if (nm in schema) {
          new_values[nm] = val;
        }
      }
      for (_i = 0, _len = batch_ids.length; _i < _len; _i++) {
        r0id = batch_ids[_i];
        if (!(r0id in r.idx)) {
          throw new E.NotFoundError("PROTO:UPDATE:" + this.mod.name + ":" + resource + ":r0id");
        }
      }
      q_result = Q.resolve(true);
      _fn = function(r0id) {
        return q_result = q_result.then(function() {
          var before;
          before = {};
          for (nm in new_values) {
            before[nm] = r.idx[r0id][nm];
          }
          r.idx[r0id] = _.merge(r.idx[r0id], new_values);
          result[resource] = [r.idx[r0id]];
          return _this.pset.itemChange(ctx, 0, 'change', before, new_values, r0id, resource);
        }).then(function() {});
      };
      for (_j = 0, _len1 = batch_ids.length; _j < _len1; _j++) {
        r0id = batch_ids[_j];
        _fn(r0id);
      }
      return q_result.then(function() {
        result.success = true;
        return {
          send: result
        };
      });
    };

    PrototypeModule.prototype._delete = function(ctx, pre_loaded, resource) {
      var batch_ids, before, conn, f, id, p, q_result, r, r0id, use_doc, _fn, _i, _j, _len, _len1,
        _this = this;
      use_doc = this.mod.datasets[resource];
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:_delete:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      before = {};
      if (p.r0id === 'batch') {
        batch_ids = (function() {
          var _i, _len, _ref, _results;
          _ref = p.batch_ids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(Number(id));
          }
          return _results;
        })();
        if (!batch_ids.length) {
          throw new E.MissingArg('batch_ids');
        }
      } else {
        batch_ids = [Number(p.r0id)];
      }
      for (_i = 0, _len = batch_ids.length; _i < _len; _i++) {
        r0id = batch_ids[_i];
        if (!(r0id in r.idx)) {
          throw new E.NotFoundError("PROTO:DELETE:" + this.mod.name + ":" + resource + ":r0id", r0id);
        }
      }
      q_result = Q.resolve(true);
      _fn = function(r0id) {
        return q_result = q_result.then(function() {
          var idx, item, _k, _len2, _ref;
          _ref = r.table;
          for (idx = _k = 0, _len2 = _ref.length; _k < _len2; idx = ++_k) {
            item = _ref[idx];
            if (!(item.id === (Number(r0id)))) {
              continue;
            }
            before = _.clone(item);
            r.table.splice(idx, 1);
            break;
          }
          delete r.idx[r0id];
          return _this.pset.itemChange(ctx, 0, 'delete', before, {}, r0id, resource);
        }).then(function() {});
      };
      for (_j = 0, _len1 = batch_ids.length; _j < _len1; _j++) {
        r0id = batch_ids[_j];
        _fn(r0id);
      }
      return q_result.then(function() {
        return {
          send: {
            success: true
          }
        };
      });
    };

    return PrototypeModule;

  })();

  exports.Prototype = Prototype;

}).call(this);
