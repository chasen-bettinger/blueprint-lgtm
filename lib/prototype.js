// Generated by CoffeeScript 1.8.0
(function() {
  var E, Prototype, PrototypeModule, Q, _, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../lib/error');

  _ = require('lodash');

  _log = false;

  Prototype = (function() {
    function Prototype(kit) {
      var f;
      f = 'Prototype:constructor';
      this.log = kit.services.logger.log;
      this.config = kit.services.config.prototype;
    }

    Prototype.prototype.server_init = function(kit) {
      var clear_pset, f, mod, protos, push, q_result, wrapper, _i, _len;
      f = 'Prototype:server_init:';
      push = kit.services.push;
      wrapper = kit.services.wrapper;
      protos = this.config.modules;
      clear_pset = this.config.clear_psets_on_restart;
      q_result = Q.resolve(true);
      for (_i = 0, _len = protos.length; _i < _len; _i++) {
        mod = protos[_i];
        if (mod.enable) {
          (function(_this) {
            return (function(mod) {
              return q_result = q_result.then(function() {
                var ctx;
                ctx = {
                  conn: null,
                  log: _this.log
                };
                return push.GetPushSet(ctx, clear_pset, "Prototype/" + mod.name);
              }).then(function(pset) {
                kit.add_route_service(mod.name, new PrototypeModule(mod, pset));
                return wrapper.add(mod.name);
              });
            });
          })(this)(mod);
        }
      }
      return q_result;
    };

    return Prototype;

  })();

  PrototypeModule = (function() {
    function PrototypeModule(mod, pset) {
      var counter, dataset, f, idx, nm, rec, _i, _len, _ref, _ref1, _ref2, _ref3;
      this.mod = mod;
      this.pset = pset;
      this.S_Delete = __bind(this.S_Delete, this);
      this.S_Update = __bind(this.S_Update, this);
      this.S_Create = __bind(this.S_Create, this);
      this.S_Get = __bind(this.S_Get, this);
      f = "PrototypeModule:constructor:";
      this.resource = {};
      this.endpoints = {};
      this.endpoints["get" + this.mod.name] = {
        verb: 'get',
        route: "/Prototype/" + this.mod.name,
        use: true,
        wrap: 'default_wrap',
        version: {
          any: this.S_Get
        },
        sql_conn: true,
        sql_tx: true,
        auth_required: this.mod.auth_req
      };
      _ref = this.mod.datasets;
      for (nm in _ref) {
        dataset = _ref[nm];
        idx = {};
        counter = 0;
        _ref3 = (_ref1 = (_ref2 = this.mod.data) != null ? _ref2[nm] : void 0) != null ? _ref1 : [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          rec = _ref3[_i];
          idx[rec.id = counter++] = rec;
        }
        this.resource[nm] = {
          idx: idx,
          counter: counter
        };
        this.endpoints["create" + nm] = {
          verb: 'post',
          route: "/Prototype/" + this.mod.name + "/" + nm,
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this.S_Create, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["update" + nm] = {
          verb: 'put',
          route: "/Prototype/" + this.mod.name + "/" + nm + "/:r0id/update",
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this.S_Update, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
        this.endpoints["delete" + nm] = {
          verb: 'del',
          route: "/Prototype/" + this.mod.name + "/" + nm + "/:r0id/delete",
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this.proto_wrap(this.S_Delete, nm)
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: this.mod.auth_req
        };
      }
    }

    PrototypeModule.prototype.proto_wrap = function(func, resource) {
      return function(ctx, pre_loaded) {
        return func(ctx, pre_loaded, resource);
      };
    };

    PrototypeModule.prototype.S_Get = function(ctx, pre_loaded) {
      var f, nm, result, use_doc;
      use_doc = {
        params: {},
        response: {
          success: 'bool',
          push: 'string'
        }
      };
      for (nm in this.resource) {
        use_doc.response[nm] = 'list';
      }
      if (ctx === 'use') {
        return use_doc;
      }
      f = "Prototype:S_Get:" + this.mod.name + ":";
      _log = ctx.log;
      result = {};
      result[this.mod.name] = {};
      return Q.resolve().then((function(_this) {
        return function() {
          var id, r_obj, rec, _ref, _ref1;
          _ref = _this.resource;
          for (nm in _ref) {
            r_obj = _ref[nm];
            result[_this.mod.name][nm] = [];
            _ref1 = r_obj.idx;
            for (id in _ref1) {
              rec = _ref1[id];
              result[_this.mod.name][nm].push(rec);
            }
          }
          return _this.pset.GetPushHandle(ctx, 0);
        };
      })(this)).then(function(push_handle) {
        result.push_handle = push_handle;
        result.success = true;
        return {
          send: result
        };
      });
    };

    PrototypeModule.prototype.S_Create = function(ctx, pre_loaded, resource) {
      var col, conn, f, p, r, rec, result, schema, use_doc;
      use_doc = {
        params: this.mod.datasets[resource],
        response: {
          success: 'bool'
        }
      };
      use_doc.response[resource] = 'list';
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:S_Create:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      schema = this.mod.datasets[resource];
      rec = {};
      result = {};
      for (col in schema) {
        if (!(col in p)) {
          throw new E.MissingArg(col);
        }
        rec[col] = p[col];
      }
      rec.id = r.counter++;
      return Q.resolve().then((function(_this) {
        return function() {
          r.idx[rec.id] = rec;
          result[resource] = [rec];
          return _this.pset.ItemChange(ctx, 0, 'add', {}, rec, resource, rec.id, null);
        };
      })(this)).then((function(_this) {
        return function() {
          result.success = true;
          return {
            send: result
          };
        };
      })(this));
    };

    PrototypeModule.prototype.S_Update = function(ctx, pre_loaded, resource) {
      var batch_ids, conn, f, id, new_values, nm, p, q_result, r, r0id, result, schema, use_doc, val, _fn, _i, _j, _len, _len1;
      use_doc = {
        params: this.mod.datasets[resource],
        response: {
          success: 'bool'
        }
      };
      use_doc.response[resource] = 'list';
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:S_Update:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      schema = this.mod.datasets[resource];
      new_values = {};
      result = {};
      if (p.r0id === 'batch') {
        if (!('batch_ids' in p)) {
          throw new E.MissingArg('batch_ids');
        }
        batch_ids = (function() {
          var _i, _len, _ref, _results;
          _ref = p.batch_ids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(Number(id));
          }
          return _results;
        })();
      } else {
        batch_ids = [Number(p.r0id)];
      }
      for (nm in p) {
        val = p[nm];
        if (nm in schema) {
          new_values[nm] = val;
        }
      }
      for (_i = 0, _len = batch_ids.length; _i < _len; _i++) {
        r0id = batch_ids[_i];
        if (!(r0id in r.idx)) {
          throw new E.NotFoundError("PROTO:UPDATE:" + this.mod.name + ":" + resource + ":r0id");
        }
      }
      result[resource] = [];
      q_result = Q.resolve(true);
      _fn = (function(_this) {
        return function(r0id) {
          return q_result = q_result.then(function() {
            var before, vals;
            before = {};
            for (nm in new_values) {
              before[nm] = r.idx[r0id][nm];
            }
            r.idx[r0id] = _.merge(r.idx[r0id], new_values);
            result[resource].push(r.idx[r0id]);
            vals = _.clone(new_values);
            vals = _.merge(vals, {
              id: r0id
            });
            return _this.pset.ItemChange(ctx, 0, 'update', before, vals, resource, r0id, null);
          }).then(function() {});
        };
      })(this);
      for (_j = 0, _len1 = batch_ids.length; _j < _len1; _j++) {
        r0id = batch_ids[_j];
        _fn(r0id);
      }
      return q_result.then(function() {
        result.success = true;
        return {
          send: result
        };
      });
    };

    PrototypeModule.prototype.S_Delete = function(ctx, pre_loaded, resource) {
      var batch_ids, before, conn, f, id, p, q_result, r, r0id, use_doc, _fn, _i, _j, _len, _len1;
      use_doc = {
        params: {},
        response: {
          success: 'bool'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      f = "Prototype:S_Delete:" + this.mod.name + ":" + resource + ":";
      r = this.resource[resource];
      before = {};
      if (p.r0id === 'batch') {
        batch_ids = (function() {
          var _i, _len, _ref, _results;
          _ref = p.batch_ids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(Number(id));
          }
          return _results;
        })();
        if (!batch_ids.length) {
          throw new E.MissingArg('batch_ids');
        }
      } else {
        batch_ids = [Number(p.r0id)];
      }
      for (_i = 0, _len = batch_ids.length; _i < _len; _i++) {
        r0id = batch_ids[_i];
        if (!(r0id in r.idx)) {
          throw new E.NotFoundError("PROTO:DELETE:" + this.mod.name + ":" + resource + ":r0id", r0id);
        }
      }
      q_result = Q.resolve(true);
      _fn = (function(_this) {
        return function(r0id) {
          return q_result = q_result.then(function() {
            delete r.idx["" + r0id];
            return _this.pset.ItemChange(ctx, 0, 'delete', before, {}, resource, r0id, null);
          }).then(function() {});
        };
      })(this);
      for (_j = 0, _len1 = batch_ids.length; _j < _len1; _j++) {
        r0id = batch_ids[_j];
        _fn(r0id);
      }
      return q_result.then(function() {
        return {
          send: {
            success: true
          }
        };
      });
    };

    return PrototypeModule;

  })();

  exports.Prototype = Prototype;

}).call(this);
