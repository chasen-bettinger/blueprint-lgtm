// Generated by CoffeeScript 1.9.2
(function() {
  var E, Push, PushSet, Q, _, _log, sdb,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('./error');

  _ = require('lodash');

  sdb = false;

  _log = false;

  Push = (function() {
    function Push(kit) {
      this.S_Poll = bind(this.S_Poll, this);
      sdb = kit.services.db.mysql;
      _log = kit.services.logger.log;
      this.config = kit.services.config.push_service;
      this.util = kit.services.util;
      this.interval = this.config.poll_interval;
      this.interested_parties = [];
      this.pset_by_name = {};
      this.count = 0;
      this.ctx = {
        conn: null,
        log: _log
      };
    }

    Push.prototype.server_init = function(kit) {
      var f;
      f = 'Push:server_init';
      return Q.resolve().then((function(_this) {
        return function() {
          return sdb.core.Acquire();
        };
      })(this)).then((function(_this) {
        return function(c) {
          return _this.ctx.conn = c;
        };
      })(this));
    };

    Push.prototype.server_start = function(kit) {
      var f;
      f = 'Push:server_start';
      return Q.resolve().then((function(_this) {
        return function() {
          return sdb.pset_item_change.GetMostRecentChanges(_this.ctx, 1);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          _log.debug(f, 'got latest item_change', db_rows);
          if (db_rows.length) {
            _this.count = db_rows[0].count;
          }
          if (!db_rows.length) {
            return [];
          }
          return sdb.pset_item_change.GetMostRecentChanges(_this.ctx, _this.config.max_buffer_size);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          var cb, i, len, ref;
          if (!db_rows.length) {
            return false;
          }
          ref = _this.interested_parties;
          for (i = 0, len = ref.length; i < len; i++) {
            cb = ref[i];
            cb(db_rows);
          }
          return null;
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.Start();
        };
      })(this));
    };

    Push.prototype.RegisterForChanges = function(cb) {
      return this.interested_parties.push(cb);
    };

    Push.prototype.GetPushSet = function(ctx, clear_pset, nm) {
      var f, pset, pset_id, ref;
      f = 'Push:GetPushSet:';
      _log = ctx.log;
      _log.debug(f, {
        clear_pset: clear_pset
      }, nm);
      pset_id = false;
      pset = (ref = this.pset_by_name[nm]) != null ? ref : false;
      if (pset && !clear_pset) {
        return pset;
      }
      return Q.resolve().then(function() {
        return sdb.core.Acquire();
      }).then(function(c) {
        if (c !== false) {
          ctx.conn = c;
        }
        return sdb.core.StartTransaction(ctx);
      }).then(function() {
        return sdb.pset.read_or_insert(ctx, nm);
      }).then((function(_this) {
        return function(pset_rec) {
          _this.pset_by_name[nm] = new PushSet(pset_rec, _this.util);
          pset_id = pset_rec.id;
          if (!clear_pset) {
            return false;
          }
          return _this.S_CleanPushSet(ctx, pset_id);
        };
      })(this)).then(function(clean_result) {
        _log.debug(f, 'got clean_result:', clean_result);
        return sdb.core.sqlQuery(ctx, 'COMMIT');
      }).then((function(_this) {
        return function(db_result) {
          sdb.core.release(ctx.conn);
          return _this.pset_by_name[nm];
        };
      })(this));
    };

    Push.prototype.Start = function() {
      return this.timer = setTimeout(this.S_Poll, this.interval);
    };

    Push.prototype.S_Poll = function() {
      var f, fromId, limit;
      f = 'Push:Poll';
      limit = this.config.poll_limit;
      fromId = this.count;
      return Q.resolve().then((function(_this) {
        return function() {
          return sdb.pset_item_change.GetNext(_this.ctx, fromId, limit);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          var cb, i, len, ref;
          if (db_rows.length) {
            _this.count = db_rows[db_rows.length - 1].count;
          }
          if (!db_rows.length) {
            return false;
          }
          ref = _this.interested_parties;
          for (i = 0, len = ref.length; i < len; i++) {
            cb = ref[i];
            cb(db_rows);
          }
          return null;
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.timer = setTimeout(_this.S_Poll, _this.interval);
        };
      })(this)).fail(function(e) {
        return _log.error(f, e, e.stack);
      });
    };

    Push.prototype.S_CleanPushSet = function(ctx, pset_id) {
      var f, item_ids;
      f = 'Push:S_CleanPushSet';
      _log = ctx.log;
      _log.debug(f, {
        pset_id: pset_id
      });
      item_ids = [];
      return Q.resolve().then(function() {
        return sdb.pset_item.get_by_psid(ctx, pset_id);
      }).then(function(db_rows) {
        var i, len, row;
        _log.debug(f, 'got item ids:', db_rows);
        for (i = 0, len = db_rows.length; i < len; i++) {
          row = db_rows[i];
          item_ids.push(row.id);
        }
        return sdb.pset_item_change.delete_items(ctx, item_ids);
      }).then(function(db_result) {
        _log.debug(f, 'got delete changes:', db_result);
        return sdb.pset_item.delete_pset(ctx, pset_id);
      }).then(function(db_result) {
        _log.debug(f, 'got delete items:', db_result);
        return true;
      });
    };

    return Push;

  })();

  PushSet = (function() {
    function PushSet(pset1, util) {
      this.pset = pset1;
      this.util = util;
      this.c_items = {};
    }

    PushSet.prototype.ItemChange = function(ctx, xref, verb, prev, now, resource, tbl_id, tbl) {
      var after, before, f, pset_item_id, ref;
      f = "PushSet:" + this.pset.name + ":ItemChange:";
      _log = ctx.log;
      _log.debug(f, {
        xref: xref,
        verb: verb,
        resource: resource,
        tbl_id: tbl_id,
        tbl: tbl
      });
      pset_item_id = false;
      ref = this.util.Diff(prev, now), before = ref[0], after = ref[1];
      _log.debug(f, {
        before: before,
        after: after
      });
      if ((_.isEmpty(after)) && verb === 'update') {
        return false;
      }
      return Q.resolve().then((function(_this) {
        return function() {
          return _this.S_GetItem(ctx, xref);
        };
      })(this)).then((function(_this) {
        return function(item_rec) {
          _log.debug(f, {
            item_rec: item_rec
          });
          pset_item_id = item_rec.id;
          return sdb.pset_item.lock(ctx, pset_item_id);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          var new_change;
          if (db_rows.length !== 1) {
            throw new E.DbError('PUSHSET:ITEMCHANGE:BAD_LOCK');
          }
          before = JSON.stringify(before);
          after = JSON.stringify(after);
          new_change = {
            pset_id: _this.pset.id,
            pset_item_id: pset_item_id,
            verb: verb,
            prev: before,
            after: after,
            resource: resource,
            tbl_id: tbl_id,
            tbl: tbl
          };
          return sdb.pset_item_change.create(ctx, new_change);
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          return sdb.pset_item.update_by_id(ctx, pset_item_id, {
            count: db_result.insertId
          });
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          if (db_result.affectedRows !== 1) {
            throw new E.DbError('PUSHSET:ITEMCHANGE:UPDATE_COUNT');
          }
          return null;
        };
      })(this));
    };

    PushSet.prototype.GetPushHandle = function(ctx, xref) {
      var f, item, item_change;
      f = "PushSet:" + this.pset.name + ":GetPushHandle:";
      _log = ctx.log;
      item = false;
      item_change = false;
      return Q.resolve().then((function(_this) {
        return function() {
          return _this.S_GetItem(ctx, xref);
        };
      })(this)).then((function(_this) {
        return function(item_rec) {
          item = item_rec;
          return sdb.pset_item_change.GetMostRecentForItem(ctx, _this.pset.id, item_rec.id);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          if (!db_rows.length) {
            throw new E.ServerError("PUSHSET:GET_HANDLE:NO_LATEST_CHANGE");
          }
          item_change = db_rows[0];
          return _this.pset.id + "/" + item.id + "/" + item_change.id;
        };
      })(this));
    };

    PushSet.prototype.S_GetItem = function(ctx, xref) {
      var f, item, ref, sxref;
      f = "PushSet:" + this.pset.name + ":S_GetItem:";
      _log = ctx.log;
      _log.debug(f, xref);
      sxref = String(xref);
      item = (ref = this.c_items[sxref]) != null ? ref : false;
      if (item) {
        return item;
      }
      return Q.resolve().then((function(_this) {
        return function() {
          return sdb.pset_item.get_psid_xref(ctx, _this.pset.id, sxref);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          _log.debug(f, 'got pset_item:', db_rows);
          if (db_rows.length) {
            _this.c_items[sxref] = db_rows[0];
            return false;
          }
          return _this.S_CreateItem(ctx, sxref);
        };
      })(this)).then((function(_this) {
        return function(new_handle) {
          _log.debug(f, 'got new_handle:', new_handle);
          if (new_handle !== false) {
            _this.c_items[sxref] = new_handle;
          }
          return _this.c_items[sxref];
        };
      })(this));
    };

    PushSet.prototype.S_CreateItem = function(ctx, xref) {
      var f, handle, pset_id;
      f = "PushSet:" + this.pset.name + ":S_CreateItem:";
      _log = ctx.log;
      _log.debug(f, xref);
      pset_id = this.pset.id;
      handle = false;
      return Q.resolve().then(function() {
        return sdb.pset_item.create(ctx, {
          pset_id: pset_id,
          xref: xref
        });
      }).then((function(_this) {
        return function(db_result) {
          var id;
          _log.debug(f, 'got create pset item result:', db_result);
          id = db_result.insertId;
          return sdb.pset_item.get_by_id(ctx, id);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          var after, prev, resource, tbl, tbl_id;
          _log.debug(f, 'got re-read:', db_rows);
          if (db_rows.length !== 1) {
            throw new E.DbError('PUSHSET:CREATE_ITEM:REREAD');
          }
          handle = db_rows[0];
          prev = {};
          after = {};
          resource = null;
          tbl_id = null;
          tbl = null;
          return _this.ItemChange(ctx, xref, 'init', prev, after, resource, tbl_id, tbl);
        };
      })(this)).then((function(_this) {
        return function() {
          return handle;
        };
      })(this));
    };

    return PushSet;

  })();

  exports.Push = Push;

}).call(this);
