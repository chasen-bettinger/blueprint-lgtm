// Generated by CoffeeScript 1.6.3
(function() {
  var E, Push, PushSet, Q, sdb, _log;

  Q = require('q');

  E = require('./error');

  sdb = false;

  _log = false;

  Push = (function() {
    function Push(kit) {
      this.kit = kit;
      kit.services.logger.log.info('Initializing Push Service...');
      sdb = kit.services.db.mysql;
      _log = kit.services.logger.log;
      this.pset_by_name = {};
    }

    Push.prototype.GetPushSet = function(ctx, clear_pset, nm) {
      var f, pset, pset_id, _ref,
        _this = this;
      f = 'Push:GetPushSet';
      _log = ctx.log;
      _log.debug(f, {
        clear_pset: clear_pset
      }, nm);
      pset_id = false;
      pset = (_ref = this.pset_by_name[nm]) != null ? _ref : false;
      if (pset && !clear_pset) {
        return pset;
      }
      return Q.resolve().then(function() {
        return sdb.core.Acquire();
      }).then(function(c) {
        if (c !== false) {
          ctx.conn = c;
        }
        return sdb.core.StartTransaction(ctx);
      }).then(function() {
        return sdb.pset.read_or_insert(ctx, nm);
      }).then(function(pset_rec) {
        _this.pset_by_name[nm] = new PushSet(pset_rec);
        pset_id = pset_rec.id;
        if (!clear_pset) {
          return false;
        }
        return _this.CleanPushSet(ctx, pset_id);
      }).then(function(clean_result) {
        _log.debug(f, 'got clean_result:', clean_result);
        return sdb.core.sqlQuery(ctx, 'COMMIT');
      }).then(function(db_result) {
        sdb.core.release(ctx.conn);
        return _this.pset_by_name[nm];
      });
    };

    Push.prototype.CleanPushSet = function(ctx, pset_id) {
      var f, item_ids;
      f = 'Push:CleanPushSet';
      _log = ctx.log;
      _log.debug(f, {
        pset_id: pset_id
      });
      item_ids = [];
      return Q.resolve().then(function() {
        return sdb.pset_item.get_by_psid(ctx, pset_id);
      }).then(function(db_rows) {
        var row, _i, _len;
        _log.debug(f, 'got item ids:', db_rows);
        for (_i = 0, _len = db_rows.length; _i < _len; _i++) {
          row = db_rows[_i];
          item_ids.push(row.id);
        }
        return sdb.pset_item_change.delete_items(ctx, item_ids);
      }).then(function(db_result) {
        _log.debug(f, 'got delete changes:', db_result);
        return sdb.pset_item.delete_pset(ctx, pset_id);
      }).then(function(db_result) {
        _log.debug(f, 'got delete items:', db_result);
        return true;
      });
    };

    return Push;

  })();

  PushSet = (function() {
    function PushSet(pset) {
      this.pset = pset;
      this.c_items = {};
    }

    PushSet.prototype.itemChange = function(ctx, xref, verb, prev, after, tbl_id, tbl) {
      var f, pset_item_id,
        _this = this;
      f = "PushSet:" + this.pset.name + ":itemChange:";
      _log = ctx.log;
      _log.debug(f, {
        xref: xref,
        verb: verb,
        prev: prev,
        after: after,
        tbl_id: tbl_id,
        tbl: tbl
      });
      pset_item_id = false;
      return Q.resolve().then(function() {
        return _this.getItem(ctx, xref);
      }).then(function(item_handle) {
        var new_change;
        _log.debug(f, {
          item_handle: item_handle
        });
        pset_item_id = item_handle.id;
        prev = JSON.stringify(prev);
        after = JSON.stringify(after);
        new_change = {
          pset_item_id: pset_item_id,
          verb: verb,
          prev: prev,
          after: after,
          tbl_id: tbl_id,
          tbl: tbl
        };
        return sdb.pset_item_change.create(ctx, new_change);
      }).then(function() {});
    };

    PushSet.prototype.getItem = function(ctx, xref) {
      var f, handle, sxref, _ref,
        _this = this;
      f = "PushSet:" + this.pset.name + ":getItem:";
      _log = ctx.log;
      _log.debug(f, xref);
      sxref = String(xref);
      handle = (_ref = this.c_items[sxref]) != null ? _ref : false;
      if (handle) {
        return handle;
      }
      return Q.resolve().then(function() {
        return sdb.pset_item.get_psid_xref(ctx, _this.pset.id, sxref);
      }).then(function(db_rows) {
        _log.debug(f, 'got pset_item:', db_rows);
        if (db_rows.length) {
          _this.c_items[sxref] = db_rows[0];
          return false;
        }
        return _this._createItem(ctx, sxref);
      }).then(function(new_handle) {
        _log.debug(f, 'got new_handle:', new_handle);
        if (new_handle !== false) {
          _this.c_items[sxref] = new_handle;
        }
        return _this.c_items[sxref];
      });
    };

    PushSet.prototype._createItem = function(ctx, xref) {
      var f, handle, pset_id,
        _this = this;
      f = "PushSet:" + this.pset.name + ":_createItem:";
      _log = ctx.log;
      _log.debug(f, xref);
      pset_id = this.pset.id;
      handle = false;
      return Q.resolve().then(function() {
        return sdb.pset_item.create(ctx, {
          pset_id: pset_id,
          xref: xref
        });
      }).then(function(db_result) {
        var id;
        _log.debug(f, 'got create pset item result:', db_result);
        id = db_result.insertId;
        return sdb.pset_item.get_by_id(ctx, id);
      }).then(function(db_rows) {
        _log.debug(f, 'got re-read:', db_rows);
        if (db_rows.length !== 1) {
          throw new E.DbError('PUSHSET:CREATE_ITEM:REREAD');
        }
        handle = db_rows[0];
        return _this.itemChange(ctx, xref, 'init', {}, {}, null, null);
      }).then(function() {
        return handle;
      });
    };

    return PushSet;

  })();

  exports.Push = Push;

}).call(this);
