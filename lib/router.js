// Generated by CoffeeScript 1.6.3
(function() {
  var Q, Router, log_map, usage, use_map,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  log_map = {
    get: 'GET ',
    post: 'POST',
    put: 'PUT ',
    del: 'DEL '
  };

  use_map = {
    get: 'GET',
    post: 'POST',
    put: 'PUT',
    del: 'DEL'
  };

  usage = [];

  Router = (function() {
    function Router(kit) {
      this.route_usage = __bind(this.route_usage, this);
      kit.services.logger.log.info('Initializing Router...');
      this.log = kit.services.logger.log;
      this.pfx = kit.services.config.route_prefix.api;
      this.template = kit.services.template_use;
      this.server = kit.services.server;
      this.usage = [];
      this.usage_by_mod = {};
    }

    Router.prototype.add_route = function(mod, name, verb, route, func) {
      var nm, use_rec, use_spec, v, val, verbs, _i, _len, _results;
      this.log.debug('adding route:', name);
      if (!this.usage_by_mod[mod]) {
        this.usage_by_mod[mod] = [];
      }
      use_spec = func('use');
      use_rec = {
        name: name,
        verb: use_map[verb],
        route: route,
        Param: (function() {
          var _ref, _results;
          _ref = use_spec.params;
          _results = [];
          for (nm in _ref) {
            val = _ref[nm];
            _results.push({
              name: nm,
              format: val
            });
          }
          return _results;
        })(),
        Response: (function() {
          var _ref, _results;
          _ref = use_spec.response;
          _results = [];
          for (nm in _ref) {
            val = _ref[nm];
            _results.push({
              name: nm,
              format: val
            });
          }
          return _results;
        })()
      };
      this.usage_by_mod[mod].push(use_rec);
      this.usage.push(use_rec);
      verbs = [verb];
      if (verb === 'del' || verb === 'put') {
        verbs.push('post');
      }
      _results = [];
      for (_i = 0, _len = verbs.length; _i < _len; _i++) {
        v = verbs[_i];
        this.log.info('\t', log_map[v], this.pfx + '' + route);
        _results.push(this.server[v](this.pfx + '' + route, func));
      }
      return _results;
    };

    Router.prototype.make_tbl = function() {
      var mod, route, route_list, table, _ref;
      table = {
        Module: []
      };
      _ref = this.usage_by_mod;
      for (mod in _ref) {
        route_list = _ref[mod];
        table.Module.push({
          name: mod,
          Route: (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = route_list.length; _i < _len; _i++) {
              route = route_list[_i];
              _results.push(route);
            }
            return _results;
          })()
        });
      }
      return table;
    };

    Router.prototype.route_usage = function() {
      var f,
        _this = this;
      f = 'Router:route_usage';
      return this.server.get(this.pfx, function(q, r, n) {
        var e, result;
        if (q.params.format === 'json') {
          r.send(_this.usage);
        } else {
          try {
            result = _this.template.render('Usage', 'Usage', 'usage_main', _this.make_tbl());
          } catch (_error) {
            e = _error;
            _this.log.debug(e, e.stack);
            throw e;
          }
          r.set('Content-Type', 'text/html');
          r.send(200, result, {
            'Content-Type': 'text/html; charset=utf-8'
          });
        }
        return n();
      });
    };

    return Router;

  })();

  exports.Router = Router;

}).call(this);
