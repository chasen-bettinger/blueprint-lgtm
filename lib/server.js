// Generated by CoffeeScript 2.0.0-beta1
(function() {
  var Server, _, restify;

  restify = require('restify');

  _ = require('lodash');

  Server = class Server {
    constructor(kit) {
      this.config = kit.services.config;
      this.log = kit.services.logger.log;
      this.server = false;
      this.log.info('Server Initialized...');
    }

    create() {
      return this.server = restify.createServer(_.merge({}, {log: this.log}, this.config.createServer));
    }

    add_restify_handlers() {
      var handler, i, len, ref, results;
      ref = this.config.restify.handlers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        handler = ref[i];
        log.info(`(restify handler) Server.use ${handler}`, this.config.restify[handler]);
        results.push(server.use(restify[handler](this.config.restify[handler])));
      }
      return results;
    }

    handle_options() {
      log.info("(restify) Server.opts", this.config.restify.allow_headers);
      return server.opts(/.*/, (req, res) => {
        var ref;
        res.setHeader('access-control-allow-headers', ((ref = this.config.restify.allow_headers) != null ? ref : []).join(', '));
        return res.send(204);
      });
    }

    parse_json() {
      return server.use(function(req, res, next) {
        if ("JSON" in req.params) {
          _.merge(req.params, JSON.parse(req.params.JSON));
        }
        return next();
      });
    }

    strip_html() {
      return server.use(function(req, res, next) {
        var param;
        for (param in req.params) {
          if (req.params[param] !== null && _.isString(req.params[param])) {
            req.params[param] = req.params[param].replace(/[<>]/g, "");
          }
        }
        return next();
      });
    }

    add_static_server() {
      return server.get(/.*/, restify.serveStatic(this.config.api.static_file_server));
    }

    start(cb) {
      return server.listen(this.config.api.port, cb);
    }

    get() {
      return this.server;
    }

  };

  exports.Server = Server;

}).call(this);
