// Generated by CoffeeScript 1.4.0
(function() {
  var E, LongPoll, _, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  E = require('../lib/error');

  _ = require('lodash');

  _log = false;

  LongPoll = (function() {

    function LongPoll(kit) {
      this.LongPollRequest = __bind(this.LongPollRequest, this);

      var _ref;
      _log = kit.services.logger.log;
      this.config = kit.services.config;
      this.push = kit.services.push;
      this.pollMgr = kit.services.pollMgr;
      this.setTimeout = ((_ref = kit.services.test) != null ? _ref.mock_setTimeout : void 0) || setTimeout;
      this.long_timeout = this.config.api.longPollTimeout;
      this.safe_timeout = this.long_timeout + 5000;
      _log.info('Setting LongPoll Timeout to:', this.long_timeout);
      this.endpoints = {
        poll: {
          verb: 'post',
          route: '/Poll',
          use: true,
          wrap: 'simple_wrap',
          version: {
            any: this.LongPollRequest
          },
          auth_required: this.config.api.authReqForPoll
        }
      };
    }

    LongPoll.prototype.LongPollRequest = function(req, res, next) {
      var arg, f, id, p, use_doc, _i, _len, _ref,
        _this = this;
      use_doc = {
        params: {
          state: '{}',
          listen: '{}'
        },
        response: {
          state: '{}',
          listen: '{}',
          sync: '{}'
        }
      };
      if (req === 'use') {
        return use_doc;
      }
      f = 'LongPoll:_LongPollRequest:';
      _log = req.log;
      p = req.params;
      id = req.id();
      _ref = ['state', 'listen'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        if (!(arg in p)) {
          res.send(new E.MissingArg(arg));
          return next();
        }
      }
      _log.debug(f, 'state:', p.state, 'listen:', p.listen);
      req.connection.pause();
      req.connection.setTimeout(this.safe_timeout);
      req.on('close', function() {
        _log.debug('REQ-EVENT:CLOSE', id);
        return _this.pollMgr.PollerClosed(id);
      });
      this.pollMgr.AddPoller(id, req, res, p.listen, p.state, this.long_timeout);
      return next();
    };

    return LongPoll;

  })();

  exports.LongPoll = LongPoll;

}).call(this);
