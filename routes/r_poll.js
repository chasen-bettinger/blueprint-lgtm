// Generated by CoffeeScript 1.4.0
var E, LongPoll, Q, _, _log, _log2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Q = require('q');

E = require('../lib/error');

_ = require('lodash');

_log = false;

_log2 = {
  debug: function() {}
};

LongPoll = (function() {

  function LongPoll(kit) {
    this.C_Finish = __bind(this.C_Finish, this);

    this.C_ProcessChanges = __bind(this.C_ProcessChanges, this);

    this.LongPollRequest = __bind(this.LongPollRequest, this);

    var _ref;
    _log = kit.services.logger.log;
    this.config = kit.services.config;
    this.push = kit.services.push;
    this.setTimeout = ((_ref = kit.services.test) != null ? _ref.mock_setTimeout : void 0) || setTimeout;
    this.long_timeout = this.config.api.longPollTimeout;
    _log.info('Setting LongPoll Timeout to:', this.long_timeout);
    this.safe_timeout = this.long_timeout + 5000;
    this.pollers = {};
    this.pollers_msgs = {};
    this.pre_check_id = {};
    this.registry = {};
    this.endpoints = {
      poll: {
        verb: 'post',
        route: '/Poll',
        use: true,
        wrap: 'simple_wrap',
        version: {
          any: this.LongPollRequest
        },
        auth_required: this.config.api.authReqForPoll
      }
    };
  }

  LongPoll.prototype.server_init = function(kit) {
    return this.push.RegisterForChanges(this.C_ProcessChanges);
  };

  LongPoll.prototype.LongPollRequest = function(req, res, next) {
    var arg, count, f, handle, id, item, listen, nm, p, partial_handle, pset, state, use_doc, _base, _i, _len, _ref, _ref1, _ref2, _ref3,
      _this = this;
    use_doc = {
      params: {
        state: 'obj',
        listen: 'obj'
      },
      response: {
        state: 'obj',
        listen: 'obj',
        sync: 'obj'
      }
    };
    if (req === 'use') {
      return use_doc;
    }
    f = 'LongPoll::_LongPollRequest:';
    _log = req.log;
    p = req.params;
    id = req.id();
    _ref = ['state', 'listen'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (!(arg in p)) {
        res.send(new E.MissingArg(arg));
        return next();
      }
    }
    _log.debug(f, 'state:', p.state, 'listen:', p.listen);
    req.connection.pause();
    req.connection.setTimeout(this.safe_timeout);
    req.on('close', function() {
      _log.debug('REQ-EVENT:CLOSE', req.params, id);
      return _this.S_CleanupReq(id);
    });
    state = p.state;
    listen = p.listen;
    this.pollers[id] = {
      req: req,
      res: res,
      state: state,
      listen: listen,
      handles: [],
      handle_map: {}
    };
    _ref1 = p.listen;
    for (nm in _ref1) {
      handle = _ref1[nm];
      _ref2 = handle.split('/'), pset = _ref2[0], item = _ref2[1], count = _ref2[2];
      partial_handle = pset + '/' + item;
      if ((_ref3 = (_base = this.registry)[partial_handle]) == null) {
        _base[partial_handle] = [];
      }
      this.registry[partial_handle].push(id);
      this.pollers[id].handles.push(partial_handle);
      this.pollers[id].handle_map[partial_handle] = nm;
    }
    _log2.debug(f, 'handle_map:', this.pollers[id].handle_map);
    this.setTimeout((function() {
      return _this.C_Finish(id);
    }), this.long_timeout);
    return next();
  };

  LongPoll.prototype.C_ProcessChanges = function(sorted_changes) {
    var f, formatted_changes;
    f = 'LongPoll:C_ProcessChanges:';
    this.S_UpdateHistoryBuffer(sorted_changes);
    formatted_changes = this.S_FormatChanges(sorted_changes);
    return this.S_RespondWithChanges(formatted_changes);
  };

  LongPoll.prototype.S_UpdateHistoryBuffer = function(sorted_changes) {
    return true;
  };

  LongPoll.prototype.S_FormatChanges = function(sorted_changes) {
    var change, change_list, data, f, formatted_changes, ph, _base, _i, _len, _name, _ref;
    f = 'LongPoll:S_FormatChanges:';
    data = {};
    formatted_changes = [];
    for (ph in sorted_changes) {
      change_list = sorted_changes[ph];
      data[ph] = {
        sync: {},
        partial_handle: ph
      };
      for (_i = 0, _len = change_list.length; _i < _len; _i++) {
        change = change_list[_i];
        if (!(data[ph].count > change.count)) {
          data[ph].count = change.count;
        }
        if ((_ref = (_base = data[ph].sync)[_name = change.resource]) == null) {
          _base[_name] = [];
        }
        data[ph].sync[change.resource].push(change);
      }
      formatted_changes.push(data[ph]);
    }
    return formatted_changes;
  };

  LongPoll.prototype.S_RespondWithChanges = function(formatted_changes) {
    var change, f, h, id, nm, req_needs_response, _base, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    f = 'LongPoll:S_RespondWithChanges:';
    req_needs_response = [];
    for (_i = 0, _len = formatted_changes.length; _i < _len; _i++) {
      change = formatted_changes[_i];
      _log2.debug(f, "got count:" + change.count + " handle: " + change.partial_handle);
      _log2.debug(f, "got sync:", change.sync);
      h = change.partial_handle;
      _ref1 = (_ref = this.registry[h]) != null ? _ref : [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        if (__indexOf.call(req_needs_response, id) < 0) {
          req_needs_response.push(id);
        }
        nm = this.pollers[id].handle_map[h];
        if ((_ref2 = (_base = this.pollers_msgs)[id]) == null) {
          _base[id] = {};
        }
        this.pollers_msgs[id][nm] = change.sync;
        this.pollers[id].listen[nm] = h + '/' + change.count;
      }
      this.registry[h] = [];
    }
    _results = [];
    for (_k = 0, _len2 = req_needs_response.length; _k < _len2; _k++) {
      id = req_needs_response[_k];
      _results.push(this.C_Finish(id));
    }
    return _results;
  };

  LongPoll.prototype.C_Finish = function(id) {
    var f, listen, new_state, req, res, state, _ref;
    f = 'LongPoll:C_Finish:';
    _log2.debug(f, id);
    if (!(id in this.pollers)) {
      return;
    }
    _ref = this.pollers[id], req = _ref.req, res = _ref.res, state = _ref.state, listen = _ref.listen;
    req.connection.resume();
    new_state = state;
    if (id in this.pollers_msgs) {
      _log2.debug(f, 'res end w/msgs', new_state, this.pollers_msgs[id]);
      res.send({
        state: new_state,
        listen: listen,
        sync: this.pollers_msgs[id]
      });
    } else {
      _log2.debug(f, 'res end w/o msgs', new_state);
      res.send({
        state: new_state,
        listen: listen,
        sync: {}
      });
    }
    return this.S_CleanupReq(id);
  };

  LongPoll.prototype.S_CleanupReq = function(id) {
    var f, handle, ix, _i, _len, _ref;
    f = 'LongPoll:S_CleanupReq:';
    _log2.debug(f, id);
    if (!(id in this.pollers)) {
      return;
    }
    _ref = this.pollers[id].handles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      handle = _ref[_i];
      _log2.debug(f, "remove id:" + id + " from registry:" + handle, this.registry[handle]);
      ix = this.registry[handle].indexOf(id);
      if (ix > -1) {
        this.registry[handle].splice(ix, 1);
      }
    }
    delete this.pollers[id];
    delete this.pollers_msgs[id];
    return delete this.pre_check_id[id];
  };

  return LongPoll;

})();

exports.LongPoll = LongPoll;
