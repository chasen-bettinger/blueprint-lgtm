// Generated by CoffeeScript 1.6.3
(function() {
  var E, Q, User, extnd_tbl, ident_tbl, odb, sdb, _log;

  Q = require('q');

  E = require('../lib/error');

  odb = false;

  sdb = false;

  _log = false;

  ident_tbl = 'ident';

  extnd_tbl = 'profile';

  User = (function() {
    function User(kit) {
      kit.logger.log.info('Initializing User Routes...');
      odb = kit.db.mongo;
      sdb = kit.db.mysql;
      _log = kit.logger.log;
      this.caller = {
        get: {
          use: true,
          wrap: 'read_wrap',
          version: {
            any: this._get
          },
          sql_conn: true,
          auth_required: true,
          load_user: true,
          pre_load: {
            user: this._pl_user
          }
        },
        create: {
          use: true,
          wrap: 'update_wrap',
          version: {
            any: this._create
          },
          sql_conn: true,
          auth_required: true
        }
      };
    }

    User.prototype._get = function(conn, p, pre_loaded, _log) {
      var f, use_doc;
      use_doc = {};
      if (conn === 'use') {
        return use_doc;
      }
      f = 'User:_get:';
      return Q.resolve().then(function() {
        return {
          send: {
            success: true,
            users: [pre_loaded.user]
          }
        };
      });
    };

    User.prototype._create = function(conn, p, pre_loaded, _log) {
      var f, use_doc;
      use_doc = {
        email: 'S',
        password: 'S'
      };
      if (conn === 'use') {
        return use_doc;
      }
      f = 'User:_create:';
      if (!p.email) {
        throw new E.InvalidArg('Invalid Email', 'email');
      }
      if (!p.password) {
        throw new E.InvalidArg('Invalid Password', 'password');
      }
      return Q.resolve().then(function() {
        return sdb.user.create(conn, p.first_name, p.last_name, p.email, p.password);
      }).then(function(db_result) {
        return {
          send: {
            success: true
          }
        };
      });
    };

    User.prototype._pl_user = function(conn, p) {
      var f;
      f = 'User:_pl_user:';
      _log.debug(f, p);
      return Q.resolve().then(function() {
        var sql;
        sql = 'SELECT * FROM ' + ident_tbl + ' i LEFT OUTER JOIN ' + extnd_tbl + ' e' + ' ON i.id= e.ident_id WHERE i.id= ? AND i.di= 0 AND e.di= 0';
        return sdb.core.sqlQuery(conn, sql, [100]);
      }).then(function(db_rows) {
        _log.debug('got here!', db_rows);
        if (db_rows.length !== 1) {
          throw new E.NotFoundError('User');
        }
        return db_rows;
      });
    };

    return User;

  })();

  exports.User = User;

}).call(this);
