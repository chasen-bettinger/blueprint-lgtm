// Generated by CoffeeScript 1.8.0
(function() {
  var E, Q, User, sdb, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Q = require('q');

  E = require('../lib/error');

  sdb = false;

  _log = false;

  User = (function() {
    function User(kit) {
      this._view_profile = __bind(this._view_profile, this);
      _log = kit.services.logger.log;
      sdb = kit.services.db.mysql;
      this.template = kit.services.template;
      this.ses = kit.services.ses;
      this.tripMgr = kit.services.tripMgr;
      this.endpoints = {
        get: {
          verb: 'get',
          route: '/User/:usid',
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._view_profile
          },
          sql_conn: true,
          auth_required: true,
          pre_load: {
            user: this._pl_user
          }
        },
        update_profile: {
          verb: 'put',
          route: '/User/:usid/updateprofile',
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._update_profile
          },
          sql_conn: true,
          sql_tx: true,
          auth_required: true,
          pre_load: {
            user: this._pl_user
          }
        }
      };
    }

    User.prototype._view_profile = function(ctx, pre_loaded) {
      var f, success, use_doc, user;
      use_doc = {
        params: {},
        response: {
          success: 'bool',
          users: 'list'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      f = 'User:_get:';
      success = false;
      if (pre_loaded.auth_id !== pre_loaded.user.id) {
        throw new E.AccessDenied('USER:VIEW_PROFILE:AUTH_ID');
      }
      user = [pre_loaded.user];
      success = true;
      return {
        send: {
          success: success,
          user: user
        }
      };
    };

    User.prototype._update_profile = function(ctx, pre_loaded) {
      var conn, f, new_user_values, nm, p, updatable_fields, use_doc, val;
      use_doc = {
        params: {
          fnm: 'S',
          lnm: 'S',
          website: 'S',
          avatar_path: 'S',
          avatar_thumb: 'S',
          prog_lang: 'S',
          skill_lvl: 'S'
        },
        response: {
          success: 'bool',
          updated_user: 'object'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      p = ctx.p;
      conn = ctx.conn;
      _log = ctx.log;
      if (pre_loaded.auth_id !== pre_loaded.user.id) {
        throw new E.AccessDenied('USER:UPDATE_PROFILE:AUTH_ID');
      }
      f = 'User:_update_profile:';
      updatable_fields = ['fnm', 'lnm', 'website', 'avatar_path', 'avatar_thumb', 'prog_lang', 'skill_lvl'];
      new_user_values = {};
      for (nm in p) {
        val = p[nm];
        if (__indexOf.call(updatable_fields, nm) >= 0) {
          new_user_values[nm] = val;
        }
      }
      return Q.resolve().then(function() {
        _log.debug(f, new_user_values);
        return sdb.user.update_by_ident_id(ctx, pre_loaded.user.id, new_user_values);
      }).then(function(db_result) {
        _log.debug(f, 'got profile update result:', db_result);
        if (db_result.affectedRows !== 1) {
          throw new E.DbError('User Update Failed');
        }
        new_user_values.id = pre_loaded.user.id;
        return {
          send: {
            success: true,
            updated_user: new_user_values
          }
        };
      });
    };

    User.prototype._pl_user = function(ctx, pre_loaded) {
      var f, id;
      f = 'User:_pl_user:';
      ctx.log.debug(f, ctx.p);
      id = ctx.p.usid === 'me' ? pre_loaded.auth_id : ctx.p.usid;
      return Q.resolve().then(function() {
        return sdb.user.get_by_ident_id(ctx, id);
      }).then(function(db_rows) {
        if (db_rows.length !== 1) {
          throw new E.NotFoundError('User');
        }
        return db_rows[0];
      });
    };

    return User;

  })();

  exports.User = User;

}).call(this);
