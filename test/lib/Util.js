// Generated by CoffeeScript 1.8.0
(function() {
  var Db, Q, config, http, mysql, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  _ = require('lodash');

  http = require('http');

  mysql = require('mysql');

  config = (require('../../config'))();

  if (!config.db.mysql.enable) {
    throw new Error('MYSQL NOT ENABLED');
  }

  config.db.mysql.pool.database += '_test';

  config.log = {
    name: 'test',
    level: 'info'
  };

  exports.config = config;

  exports.test_ident_id = 97;

  exports.rename = function(name) {
    return 'bp-' + name + '' + new Date().getTime();
  };

  exports.encryptedPassword = 'xfGuZKjVkoNgQyXxYT8+Hg==.f+uw2I+dqzfOE4O82Znikrbdb0lOONBxl/xcWGsQtFI=';

  Db = (function() {
    function Db(config) {
      this.config = config;
      this.SqlQuery = __bind(this.SqlQuery, this);
      this.conn = mysql.createConnection(this.config.pool);
    }

    Db.prototype.End = function() {
      this.conn.end;
      return this.conn = null;
    };

    Db.prototype.SqlQuery = function(sql, args) {
      if (this.conn === null) {
        throw new E.DbError('DB:SQL:BAD_CONN');
      }
      return (Q.ninvoke(this.conn, 'query', sql, args)).then(function(rows_n_cols) {
        return rows_n_cols[0];
      });
    };

    Db.prototype.GetOne = function(table, id) {
      return Q.resolve().then((function(_this) {
        return function() {
          var sql;
          sql = 'SELECT * FROM ' + table + ' WHERE id= ? AND di= 0';
          return _this.SqlQuery(sql, [id]);
        };
      })(this)).then(function(db_rows) {
        return db_rows[0];
      });
    };

    Db.prototype.InsertOne = function(table, new_values) {
      return Q.resolve().then((function(_this) {
        return function() {
          var arg, cols, nm, qs, sql, val;
          cols = ['cr'];
          qs = ['?'];
          arg = [null];
          for (nm in new_values) {
            val = new_values[nm];
            cols.push(nm);
            qs.push('?');
            arg.push(val);
          }
          sql = 'INSERT INTO ' + table + ' (' + (cols.join(',')) + ') VALUES (' + (qs.join(',')) + ')';
          return _this.SqlQuery(sql, arg);
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          return _this.GetOne(table, db_result.insertId);
        };
      })(this)).then(function(rec) {
        return rec;
      });
    };

    Db.prototype.GetByKey = function(ctx, table, key, vals) {
      var vals_type;
      if (!vals) {
        throw new Error('EMPTY_VALS');
      }
      vals_type = typeof vals;
      return Q.resolve().then((function(_this) {
        return function() {
          var args, sql;
          args = vals_type === 'number' || vals_type === 'string' ? [[vals]] : [vals];
          sql = 'SELECT * FROM ' + table + ' WHERE di= 0 AND ' + key + ' IN (?)';
          return _this.SqlQuery(sql, args);
        };
      })(this)).then(function(db_rows) {
        return db_rows;
      });
    };

    return Db;

  })();

  exports.db = new Db(config.db.mysql);

}).call(this);
