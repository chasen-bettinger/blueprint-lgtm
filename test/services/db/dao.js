// Generated by CoffeeScript 1.9.2

/*
Test Suite for Core Database Object.

1. Creates a MySql Interface if enabled
	a. Creates Core functionality
	b. Creates a new instance each module from config file
	c. Connects to database

2. Creates a MongoDb Interface if enabled
	a. Creates Core functionality
	b. Creates a new instance each module from config file

3. Uses the default config env
 */

(function() {
  var Db, Kit, Logger, Util, _, bpDir, chai, config, db, fs, instMap, kit, mongoose;

  chai = require('chai');

  _ = require('lodash');

  fs = require('fs');

  mongoose = require('mongoose');

  Util = require('../../lib/Util');

  Kit = require('../../../lib/kit').Kit;

  Db = require('../../../lib/db').Db;

  Logger = require('../../../lib/logger').Logger;

  instMap = {
    core: {
      inst: (require('../../../lib/db/_mysql/sql_core')).SqlCore
    },
    auth: {
      inst: (require('../../../lib/db/_mysql/sql_auth')).SqlAuth
    },
    user: {
      inst: (require('../../../lib/db/_mysql/sql_user')).SqlUser
    },
    token: {
      inst: (require('../../../lib/db/_mysql/sql_token')).SqlToken
    },
    trip: {
      inst: (require('../../../lib/db/_mysql/sql_trip')).SqlTrip
    },
    pset: {
      inst: (require('../../../lib/db/_mysql/sql_pset')).SqlPSet
    },
    pset_item: {
      inst: (require('../../../lib/db/_mysql/sql_pset')).SqlPSetItem
    },
    pset_item_change: {
      inst: (require('../../../lib/db/_mysql/sql_pset')).SqlPSetItemChange
    },
    m_core: {
      inst: (require('../../../lib/db/_mongo/model_core')).MCore
    }
  };

  chai.should();

  bpDir = '';

  if (fs.existsSync('node_modules/blueprint/lib/db/index.js')) {
    bpDir = 'node_modules/blueprint/';
  }

  config = _.merge(Util.config, {
    db: {
      mysql: {
        modules: {
          auth: {
            file: bpDir + 'lib/db/_mysql/sql_auth'
          },
          user: {
            file: bpDir + 'lib/db/_mysql/sql_user'
          },
          token: {
            file: bpDir + 'lib/db/_mysql/sql_token'
          },
          trip: {
            file: bpDir + 'lib/db/_mysql/sql_trip'
          },
          pset: {
            file: bpDir + 'lib/db/_mysql/sql_pset'
          },
          pset_item: {
            file: bpDir + 'lib/db/_mysql/sql_pset'
          },
          pset_item_change: {
            file: bpDir + 'lib/db/_mysql/sql_pset'
          }
        }
      },
      mongo: {
        models: {
          Workout: {
            file: bpDir + 'lib/db/_mongo/models/workout'
          }
        }
      }
    }
  });

  kit = new Kit;

  kit.add_service('config', config);

  kit.new_service('logger', Logger);

  kit.new_service('db', Db);

  db = kit.services.db;


  /*
  class Db
  	constructor: (kit) -> (logger.log, config)
   */

  describe('DAO', function() {
    if (config.db.mysql.enable) {
      describe('MySql', function() {
        it('should be called "mysql"', function() {
          return db.should.have.property('mysql');
        });
        it('should expose a "core" interface', function() {
          db.mysql.should.have.property('core');
          return db.mysql.core.should.be.an["instanceof"](instMap.core.inst);
        });
        it('should connect to the db', function(done) {
          return db.mysql.core.pool.query('SELECT 1+1 AS solution', done);
        });
        return it('should expose a new instance of each module defined in the config', function() {
          var module, nm, ref, results;
          ref = config.db.mysql.modules;
          results = [];
          for (nm in ref) {
            module = ref[nm];
            db.mysql.should.have.property(nm);
            results.push(db.mysql[nm].should.be.an["instanceof"](instMap[nm].inst));
          }
          return results;
        });
      });
    }
    if (config.db.mongo.enable) {
      return describe('MongoDB', function() {
        it('should connect to db', function(done) {
          var test;
          if (mongoose.connection.readyState === 1) {
            return done();
          }
          mongoose.connection.readyState.should.not.equal(0);
          mongoose.connection.readyState.should.not.equal(3);
          test = function() {
            return setTimeout(function() {
              mongoose.connection.readyState.should.equal(1);
              return done();
            }, 1000);
          };
          if (mongoose.connection.readyState === 2) {
            return test();
          }
        });
        it('should be called "mongo"', function() {
          return db.should.have.property('mongo');
        });
        it('should expose a "core" interface', function() {
          db.mongo.should.have.property('core');
          return db.mongo.core.should.be.an["instanceof"](instMap.m_core.inst);
        });
        return it('should expose a new instance of each module defined in the config', function() {
          var module, nm, ref, results;
          ref = config.db.mongo.modules;
          results = [];
          for (nm in ref) {
            module = ref[nm];
            db.mongo.should.have.property(nm);
            results.push(db.mongo[nm].should.be.an["instanceof"](mongoose.Model));
          }
          return results;
        });
      });
    }
  });

}).call(this);
